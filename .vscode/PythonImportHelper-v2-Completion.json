[
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "MultilingualModel",
        "importPath": "livekit.plugins.turn_detector.multilingual",
        "description": "livekit.plugins.turn_detector.multilingual",
        "isExtraImport": true,
        "detail": "livekit.plugins.turn_detector.multilingual",
        "documentation": {}
    },
    {
        "label": "MultilingualModel",
        "importPath": "livekit.plugins.turn_detector.multilingual",
        "description": "livekit.plugins.turn_detector.multilingual",
        "isExtraImport": true,
        "detail": "livekit.plugins.turn_detector.multilingual",
        "documentation": {}
    },
    {
        "label": "function_tool",
        "importPath": "livekit.agents.llm",
        "description": "livekit.agents.llm",
        "isExtraImport": true,
        "detail": "livekit.agents.llm",
        "documentation": {}
    },
    {
        "label": "function_tool",
        "importPath": "livekit.agents.llm",
        "description": "livekit.agents.llm",
        "isExtraImport": true,
        "detail": "livekit.agents.llm",
        "documentation": {}
    },
    {
        "label": "function_tool",
        "importPath": "livekit.agents.llm",
        "description": "livekit.agents.llm",
        "isExtraImport": true,
        "detail": "livekit.agents.llm",
        "documentation": {}
    },
    {
        "label": "function_tool",
        "importPath": "livekit.agents.llm",
        "description": "livekit.agents.llm",
        "isExtraImport": true,
        "detail": "livekit.agents.llm",
        "documentation": {}
    },
    {
        "label": "function_tool",
        "importPath": "livekit.agents.llm",
        "description": "livekit.agents.llm",
        "isExtraImport": true,
        "detail": "livekit.agents.llm",
        "documentation": {}
    },
    {
        "label": "function_tool",
        "importPath": "livekit.agents.llm",
        "description": "livekit.agents.llm",
        "isExtraImport": true,
        "detail": "livekit.agents.llm",
        "documentation": {}
    },
    {
        "label": "function_tool",
        "importPath": "livekit.agents.llm",
        "description": "livekit.agents.llm",
        "isExtraImport": true,
        "detail": "livekit.agents.llm",
        "documentation": {}
    },
    {
        "label": "function_tool",
        "importPath": "livekit.agents.llm",
        "description": "livekit.agents.llm",
        "isExtraImport": true,
        "detail": "livekit.agents.llm",
        "documentation": {}
    },
    {
        "label": "function_tool",
        "importPath": "livekit.agents.llm",
        "description": "livekit.agents.llm",
        "isExtraImport": true,
        "detail": "livekit.agents.llm",
        "documentation": {}
    },
    {
        "label": "function_tool",
        "importPath": "livekit.agents.llm",
        "description": "livekit.agents.llm",
        "isExtraImport": true,
        "detail": "livekit.agents.llm",
        "documentation": {}
    },
    {
        "label": "function_tool",
        "importPath": "livekit.agents.llm",
        "description": "livekit.agents.llm",
        "isExtraImport": true,
        "detail": "livekit.agents.llm",
        "documentation": {}
    },
    {
        "label": "function_tool",
        "importPath": "livekit.agents.llm",
        "description": "livekit.agents.llm",
        "isExtraImport": true,
        "detail": "livekit.agents.llm",
        "documentation": {}
    },
    {
        "label": "ChatContext",
        "importPath": "livekit.agents.llm",
        "description": "livekit.agents.llm",
        "isExtraImport": true,
        "detail": "livekit.agents.llm",
        "documentation": {}
    },
    {
        "label": "ChatMessage",
        "importPath": "livekit.agents.llm",
        "description": "livekit.agents.llm",
        "isExtraImport": true,
        "detail": "livekit.agents.llm",
        "documentation": {}
    },
    {
        "label": "ChatContext",
        "importPath": "livekit.agents.llm",
        "description": "livekit.agents.llm",
        "isExtraImport": true,
        "detail": "livekit.agents.llm",
        "documentation": {}
    },
    {
        "label": "ChatMessage",
        "importPath": "livekit.agents.llm",
        "description": "livekit.agents.llm",
        "isExtraImport": true,
        "detail": "livekit.agents.llm",
        "documentation": {}
    },
    {
        "label": "function_tool",
        "importPath": "livekit.agents.llm",
        "description": "livekit.agents.llm",
        "isExtraImport": true,
        "detail": "livekit.agents.llm",
        "documentation": {}
    },
    {
        "label": "function_tool",
        "importPath": "livekit.agents.llm",
        "description": "livekit.agents.llm",
        "isExtraImport": true,
        "detail": "livekit.agents.llm",
        "documentation": {}
    },
    {
        "label": "function_tool",
        "importPath": "livekit.agents.llm",
        "description": "livekit.agents.llm",
        "isExtraImport": true,
        "detail": "livekit.agents.llm",
        "documentation": {}
    },
    {
        "label": "function_tool",
        "importPath": "livekit.agents.llm",
        "description": "livekit.agents.llm",
        "isExtraImport": true,
        "detail": "livekit.agents.llm",
        "documentation": {}
    },
    {
        "label": "function_tool",
        "importPath": "livekit.agents.llm",
        "description": "livekit.agents.llm",
        "isExtraImport": true,
        "detail": "livekit.agents.llm",
        "documentation": {}
    },
    {
        "label": "function_tool",
        "importPath": "livekit.agents.llm",
        "description": "livekit.agents.llm",
        "isExtraImport": true,
        "detail": "livekit.agents.llm",
        "documentation": {}
    },
    {
        "label": "function_tool",
        "importPath": "livekit.agents.llm",
        "description": "livekit.agents.llm",
        "isExtraImport": true,
        "detail": "livekit.agents.llm",
        "documentation": {}
    },
    {
        "label": "function_tool",
        "importPath": "livekit.agents.llm",
        "description": "livekit.agents.llm",
        "isExtraImport": true,
        "detail": "livekit.agents.llm",
        "documentation": {}
    },
    {
        "label": "function_tool",
        "importPath": "livekit.agents.llm",
        "description": "livekit.agents.llm",
        "isExtraImport": true,
        "detail": "livekit.agents.llm",
        "documentation": {}
    },
    {
        "label": "function_tool",
        "importPath": "livekit.agents.llm",
        "description": "livekit.agents.llm",
        "isExtraImport": true,
        "detail": "livekit.agents.llm",
        "documentation": {}
    },
    {
        "label": "ImageContent",
        "importPath": "livekit.agents.llm",
        "description": "livekit.agents.llm",
        "isExtraImport": true,
        "detail": "livekit.agents.llm",
        "documentation": {}
    },
    {
        "label": "ChatContext",
        "importPath": "livekit.agents.llm",
        "description": "livekit.agents.llm",
        "isExtraImport": true,
        "detail": "livekit.agents.llm",
        "documentation": {}
    },
    {
        "label": "ChatMessage",
        "importPath": "livekit.agents.llm",
        "description": "livekit.agents.llm",
        "isExtraImport": true,
        "detail": "livekit.agents.llm",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "RunContext",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "RunContext",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "RunContext",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "RunContext",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "RunContext",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "RunContext",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "RunContext",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "room_io",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "ModelSettings",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "RunContext",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "RunContext",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "RunContext",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "RunContext",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "RunContext",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "RunContext",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "room_io",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents.voice",
        "description": "livekit.agents.voice",
        "isExtraImport": true,
        "detail": "livekit.agents.voice",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "RoomOutputOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "RoomInputOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "RoomInputOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "RoomInputOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "mcp",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "vad",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "vad",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "ModelSettings",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "ModelSettings",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "ModelSettings",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "RunContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "function_tool",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "RoomInputOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "AgentSession",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "tokenize",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "RoomOutputOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "AutoSubscribe",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "JobContext",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "WorkerOptions",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "get_job_context",
        "importPath": "livekit.agents",
        "description": "livekit.agents",
        "isExtraImport": true,
        "detail": "livekit.agents",
        "documentation": {}
    },
    {
        "label": "noise_cancellation",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "elevenlabs",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "tavus",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "cartesia",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "noise_cancellation",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "cartesia",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "noise_cancellation",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "cartesia",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "cartesia",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "cartesia",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "anthropic",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "google",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "google",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "cartesia",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "elevenlabs",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "elevenlabs",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "playai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "rime",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "rime",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "rime",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "elevenlabs",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "cartesia",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "playai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "rime",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "noise_cancellation",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "elevenlabs",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "elevenlabs",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "cartesia",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "elevenlabs",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "rime",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "elevenlabs",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "cartesia",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "deepgram",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "noise_cancellation",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "silero",
        "importPath": "livekit.plugins",
        "description": "livekit.plugins",
        "isExtraImport": true,
        "detail": "livekit.plugins",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncIterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "rtc",
        "importPath": "livekit",
        "description": "livekit",
        "isExtraImport": true,
        "detail": "livekit",
        "documentation": {}
    },
    {
        "label": "rtc",
        "importPath": "livekit",
        "description": "livekit",
        "isExtraImport": true,
        "detail": "livekit",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "livekit",
        "description": "livekit",
        "isExtraImport": true,
        "detail": "livekit",
        "documentation": {}
    },
    {
        "label": "rtc",
        "importPath": "livekit",
        "description": "livekit",
        "isExtraImport": true,
        "detail": "livekit",
        "documentation": {}
    },
    {
        "label": "rtc",
        "importPath": "livekit",
        "description": "livekit",
        "isExtraImport": true,
        "detail": "livekit",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "livekit",
        "description": "livekit",
        "isExtraImport": true,
        "detail": "livekit",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "livekit",
        "description": "livekit",
        "isExtraImport": true,
        "detail": "livekit",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "livekit",
        "description": "livekit",
        "isExtraImport": true,
        "detail": "livekit",
        "documentation": {}
    },
    {
        "label": "rtc",
        "importPath": "livekit",
        "description": "livekit",
        "isExtraImport": true,
        "detail": "livekit",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "livekit",
        "description": "livekit",
        "isExtraImport": true,
        "detail": "livekit",
        "documentation": {}
    },
    {
        "label": "rtc",
        "importPath": "livekit",
        "description": "livekit",
        "isExtraImport": true,
        "detail": "livekit",
        "documentation": {}
    },
    {
        "label": "rtc",
        "importPath": "livekit",
        "description": "livekit",
        "isExtraImport": true,
        "detail": "livekit",
        "documentation": {}
    },
    {
        "label": "rtc",
        "importPath": "livekit",
        "description": "livekit",
        "isExtraImport": true,
        "detail": "livekit",
        "documentation": {}
    },
    {
        "label": "agents",
        "importPath": "livekit",
        "description": "livekit",
        "isExtraImport": true,
        "detail": "livekit",
        "documentation": {}
    },
    {
        "label": "rtc",
        "importPath": "livekit",
        "description": "livekit",
        "isExtraImport": true,
        "detail": "livekit",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "livekit",
        "description": "livekit",
        "isExtraImport": true,
        "detail": "livekit",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "livekit",
        "description": "livekit",
        "isExtraImport": true,
        "detail": "livekit",
        "documentation": {}
    },
    {
        "label": "rtc",
        "importPath": "livekit",
        "description": "livekit",
        "isExtraImport": true,
        "detail": "livekit",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "livekit",
        "description": "livekit",
        "isExtraImport": true,
        "detail": "livekit",
        "documentation": {}
    },
    {
        "label": "rtc",
        "importPath": "livekit",
        "description": "livekit",
        "isExtraImport": true,
        "detail": "livekit",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "livekit",
        "description": "livekit",
        "isExtraImport": true,
        "detail": "livekit",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "livekit",
        "description": "livekit",
        "isExtraImport": true,
        "detail": "livekit",
        "documentation": {}
    },
    {
        "label": "rtc",
        "importPath": "livekit",
        "description": "livekit",
        "isExtraImport": true,
        "detail": "livekit",
        "documentation": {}
    },
    {
        "label": "wave",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "wave",
        "description": "wave",
        "detail": "wave",
        "documentation": {}
    },
    {
        "label": "load_prompt",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "load_prompt",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "CustomerDatabase",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "CustomerDatabase",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "EventEmitter",
        "importPath": "livekit.rtc",
        "description": "livekit.rtc",
        "isExtraImport": true,
        "detail": "livekit.rtc",
        "documentation": {}
    },
    {
        "label": "EventEmitter",
        "importPath": "livekit.rtc",
        "description": "livekit.rtc",
        "isExtraImport": true,
        "detail": "livekit.rtc",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageDraw",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageFont",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "st7789",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "st7789",
        "description": "st7789",
        "detail": "st7789",
        "documentation": {}
    },
    {
        "label": "signal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "signal",
        "description": "signal",
        "detail": "signal",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "textwrap",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "textwrap",
        "description": "textwrap",
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "StopResponse",
        "importPath": "livekit.agents.voice.agent_activity",
        "description": "livekit.agents.voice.agent_activity",
        "isExtraImport": true,
        "detail": "livekit.agents.voice.agent_activity",
        "documentation": {}
    },
    {
        "label": "FastMCP",
        "importPath": "mcp.server.fastmcp",
        "description": "mcp.server.fastmcp",
        "isExtraImport": true,
        "detail": "mcp.server.fastmcp",
        "documentation": {}
    },
    {
        "label": "concurrent.futures",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "room",
        "importPath": "livekit.protocol",
        "description": "livekit.protocol",
        "isExtraImport": true,
        "detail": "livekit.protocol",
        "documentation": {}
    },
    {
        "label": "DataPacket",
        "importPath": "livekit.protocol.models",
        "description": "livekit.protocol.models",
        "isExtraImport": true,
        "detail": "livekit.protocol.models",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "aiohttp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiohttp",
        "description": "aiohttp",
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "LLMMetrics",
        "importPath": "livekit.agents.metrics",
        "description": "livekit.agents.metrics",
        "isExtraImport": true,
        "detail": "livekit.agents.metrics",
        "documentation": {}
    },
    {
        "label": "STTMetrics",
        "importPath": "livekit.agents.metrics",
        "description": "livekit.agents.metrics",
        "isExtraImport": true,
        "detail": "livekit.agents.metrics",
        "documentation": {}
    },
    {
        "label": "TTSMetrics",
        "importPath": "livekit.agents.metrics",
        "description": "livekit.agents.metrics",
        "isExtraImport": true,
        "detail": "livekit.agents.metrics",
        "documentation": {}
    },
    {
        "label": "EOUMetrics",
        "importPath": "livekit.agents.metrics",
        "description": "livekit.agents.metrics",
        "isExtraImport": true,
        "detail": "livekit.agents.metrics",
        "documentation": {}
    },
    {
        "label": "VADMetrics",
        "importPath": "livekit.agents.metrics",
        "description": "livekit.agents.metrics",
        "isExtraImport": true,
        "detail": "livekit.agents.metrics",
        "documentation": {}
    },
    {
        "label": "LLMMetrics",
        "importPath": "livekit.agents.metrics",
        "description": "livekit.agents.metrics",
        "isExtraImport": true,
        "detail": "livekit.agents.metrics",
        "documentation": {}
    },
    {
        "label": "STTMetrics",
        "importPath": "livekit.agents.metrics",
        "description": "livekit.agents.metrics",
        "isExtraImport": true,
        "detail": "livekit.agents.metrics",
        "documentation": {}
    },
    {
        "label": "EOUMetrics",
        "importPath": "livekit.agents.metrics",
        "description": "livekit.agents.metrics",
        "isExtraImport": true,
        "detail": "livekit.agents.metrics",
        "documentation": {}
    },
    {
        "label": "TTSMetrics",
        "importPath": "livekit.agents.metrics",
        "description": "livekit.agents.metrics",
        "isExtraImport": true,
        "detail": "livekit.agents.metrics",
        "documentation": {}
    },
    {
        "label": "VADMetrics",
        "importPath": "livekit.agents.metrics",
        "description": "livekit.agents.metrics",
        "isExtraImport": true,
        "detail": "livekit.agents.metrics",
        "documentation": {}
    },
    {
        "label": "RoomInputOptions",
        "importPath": "livekit.agents.voice.room_io",
        "description": "livekit.agents.voice.room_io",
        "isExtraImport": true,
        "detail": "livekit.agents.voice.room_io",
        "documentation": {}
    },
    {
        "label": "RoomInputOptions",
        "importPath": "livekit.agents.voice.room_io",
        "description": "livekit.agents.voice.room_io",
        "isExtraImport": true,
        "detail": "livekit.agents.voice.room_io",
        "documentation": {}
    },
    {
        "label": "RoomInputOptions",
        "importPath": "livekit.agents.voice.room_io",
        "description": "livekit.agents.voice.room_io",
        "isExtraImport": true,
        "detail": "livekit.agents.voice.room_io",
        "documentation": {}
    },
    {
        "label": "RoomInputOptions",
        "importPath": "livekit.agents.voice.room_io",
        "description": "livekit.agents.voice.room_io",
        "isExtraImport": true,
        "detail": "livekit.agents.voice.room_io",
        "documentation": {}
    },
    {
        "label": "RoomInputOptions",
        "importPath": "livekit.agents.voice.room_io",
        "description": "livekit.agents.voice.room_io",
        "isExtraImport": true,
        "detail": "livekit.agents.voice.room_io",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "rich.table",
        "description": "rich.table",
        "isExtraImport": true,
        "detail": "rich.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "rich.table",
        "description": "rich.table",
        "isExtraImport": true,
        "detail": "rich.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "rich.table",
        "description": "rich.table",
        "isExtraImport": true,
        "detail": "rich.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "rich.table",
        "description": "rich.table",
        "isExtraImport": true,
        "detail": "rich.table",
        "documentation": {}
    },
    {
        "label": "box",
        "importPath": "rich",
        "description": "rich",
        "isExtraImport": true,
        "detail": "rich",
        "documentation": {}
    },
    {
        "label": "box",
        "importPath": "rich",
        "description": "rich",
        "isExtraImport": true,
        "detail": "rich",
        "documentation": {}
    },
    {
        "label": "box",
        "importPath": "rich",
        "description": "rich",
        "isExtraImport": true,
        "detail": "rich",
        "documentation": {}
    },
    {
        "label": "box",
        "importPath": "rich",
        "description": "rich",
        "isExtraImport": true,
        "detail": "rich",
        "documentation": {}
    },
    {
        "label": "RAGBuilder",
        "importPath": "rag_db_builder",
        "description": "rag_db_builder",
        "isExtraImport": true,
        "detail": "rag_db_builder",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "annoy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "annoy",
        "description": "annoy",
        "detail": "annoy",
        "documentation": {}
    },
    {
        "label": "EnglishModel",
        "importPath": "livekit.plugins.turn_detector.english",
        "description": "livekit.plugins.turn_detector.english",
        "isExtraImport": true,
        "detail": "livekit.plugins.turn_detector.english",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "urljoin",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "librosa",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "librosa",
        "description": "librosa",
        "detail": "librosa",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "DeleteRoomRequest",
        "importPath": "livekit.api",
        "description": "livekit.api",
        "isExtraImport": true,
        "detail": "livekit.api",
        "documentation": {}
    },
    {
        "label": "stt",
        "importPath": "launch_demos.livekit_plugins_gladia",
        "description": "launch_demos.livekit_plugins_gladia",
        "isExtraImport": true,
        "detail": "launch_demos.livekit_plugins_gladia",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"python-agents-examples\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"python-agents-examples\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"python-agents-examples\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"python-agents-examples\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"python-agents-examples\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "avatars.tavus.voice-assistant-frontend.node_modules.flatted.python.flatted",
        "description": "avatars.tavus.voice-assistant-frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "avatars.tavus.voice-assistant-frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "avatars.tavus.voice-assistant-frontend.node_modules.flatted.python.flatted",
        "description": "avatars.tavus.voice-assistant-frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "avatars.tavus.voice-assistant-frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "avatars.tavus.voice-assistant-frontend.node_modules.flatted.python.flatted",
        "description": "avatars.tavus.voice-assistant-frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "avatars.tavus.voice-assistant-frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "avatars.tavus.voice-assistant-frontend.node_modules.flatted.python.flatted",
        "description": "avatars.tavus.voice-assistant-frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "avatars.tavus.voice-assistant-frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "QuizAnswerDict",
        "kind": 6,
        "importPath": "avatars.tavus.tavus",
        "description": "avatars.tavus.tavus",
        "peekOfCode": "class QuizAnswerDict(TypedDict):\n    text: str\n    is_correct: bool\nclass QuizQuestionDict(TypedDict):\n    text: str\n    answers: List[QuizAnswerDict]\n@dataclass\nclass FlashCard:\n    \"\"\"Class to represent a flash card.\"\"\"\n    id: str",
        "detail": "avatars.tavus.tavus",
        "documentation": {}
    },
    {
        "label": "QuizQuestionDict",
        "kind": 6,
        "importPath": "avatars.tavus.tavus",
        "description": "avatars.tavus.tavus",
        "peekOfCode": "class QuizQuestionDict(TypedDict):\n    text: str\n    answers: List[QuizAnswerDict]\n@dataclass\nclass FlashCard:\n    \"\"\"Class to represent a flash card.\"\"\"\n    id: str\n    question: str\n    answer: str\n    is_flipped: bool = False",
        "detail": "avatars.tavus.tavus",
        "documentation": {}
    },
    {
        "label": "FlashCard",
        "kind": 6,
        "importPath": "avatars.tavus.tavus",
        "description": "avatars.tavus.tavus",
        "peekOfCode": "class FlashCard:\n    \"\"\"Class to represent a flash card.\"\"\"\n    id: str\n    question: str\n    answer: str\n    is_flipped: bool = False\n@dataclass\nclass QuizAnswer:\n    \"\"\"Class to represent a quiz answer option.\"\"\"\n    id: str",
        "detail": "avatars.tavus.tavus",
        "documentation": {}
    },
    {
        "label": "QuizAnswer",
        "kind": 6,
        "importPath": "avatars.tavus.tavus",
        "description": "avatars.tavus.tavus",
        "peekOfCode": "class QuizAnswer:\n    \"\"\"Class to represent a quiz answer option.\"\"\"\n    id: str\n    text: str\n    is_correct: bool\n@dataclass\nclass QuizQuestion:\n    \"\"\"Class to represent a quiz question.\"\"\"\n    id: str\n    text: str",
        "detail": "avatars.tavus.tavus",
        "documentation": {}
    },
    {
        "label": "QuizQuestion",
        "kind": 6,
        "importPath": "avatars.tavus.tavus",
        "description": "avatars.tavus.tavus",
        "peekOfCode": "class QuizQuestion:\n    \"\"\"Class to represent a quiz question.\"\"\"\n    id: str\n    text: str\n    answers: List[QuizAnswer]\n@dataclass\nclass Quiz:\n    \"\"\"Class to represent a quiz.\"\"\"\n    id: str\n    questions: List[QuizQuestion]",
        "detail": "avatars.tavus.tavus",
        "documentation": {}
    },
    {
        "label": "Quiz",
        "kind": 6,
        "importPath": "avatars.tavus.tavus",
        "description": "avatars.tavus.tavus",
        "peekOfCode": "class Quiz:\n    \"\"\"Class to represent a quiz.\"\"\"\n    id: str\n    questions: List[QuizQuestion]\n@dataclass\nclass UserData:\n    \"\"\"Class to store user data during a session.\"\"\"\n    ctx: Optional[JobContext] = None\n    flash_cards: List[FlashCard] = field(default_factory=list)\n    quizzes: List[Quiz] = field(default_factory=list)",
        "detail": "avatars.tavus.tavus",
        "documentation": {}
    },
    {
        "label": "UserData",
        "kind": 6,
        "importPath": "avatars.tavus.tavus",
        "description": "avatars.tavus.tavus",
        "peekOfCode": "class UserData:\n    \"\"\"Class to store user data during a session.\"\"\"\n    ctx: Optional[JobContext] = None\n    flash_cards: List[FlashCard] = field(default_factory=list)\n    quizzes: List[Quiz] = field(default_factory=list)\n    def reset(self) -> None:\n        \"\"\"Reset session data.\"\"\"\n        # Keep flash cards and quizzes intact\n    def add_flash_card(self, question: str, answer: str) -> FlashCard:\n        \"\"\"Add a new flash card to the collection.\"\"\"",
        "detail": "avatars.tavus.tavus",
        "documentation": {}
    },
    {
        "label": "AvatarAgent",
        "kind": 6,
        "importPath": "avatars.tavus.tavus",
        "description": "avatars.tavus.tavus",
        "peekOfCode": "class AvatarAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a friendly English tutor who will first greet and ask for the student's name, then greet them again using their name. After that, you will teach English based on topics chosen by the student.\n                Initial greeting sequence:\n                • First greeting: \"Hello! I'm your English tutor. What's your name?\"\n                • After getting name: \"Nice to meet you, [name]! I'm excited to help you learn English. What topic would you like to practice today?\"\n                Key responsibilities:\n                • Teach vocabulary and phrases based on student's chosen topics",
        "detail": "avatars.tavus.tavus",
        "documentation": {}
    },
    {
        "label": "env_path",
        "kind": 5,
        "importPath": "avatars.tavus.tavus",
        "description": "avatars.tavus.tavus",
        "peekOfCode": "env_path = Path(__file__).parent.parent / \".env\"\nload_dotenv(dotenv_path=Path(__file__).parent.parent / \".env\")\nlogger = logging.getLogger(\"avatar\")\nlogger.setLevel(logging.INFO)\nclass QuizAnswerDict(TypedDict):\n    text: str\n    is_correct: bool\nclass QuizQuestionDict(TypedDict):\n    text: str\n    answers: List[QuizAnswerDict]",
        "detail": "avatars.tavus.tavus",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "avatars.tavus.tavus",
        "description": "avatars.tavus.tavus",
        "peekOfCode": "logger = logging.getLogger(\"avatar\")\nlogger.setLevel(logging.INFO)\nclass QuizAnswerDict(TypedDict):\n    text: str\n    is_correct: bool\nclass QuizQuestionDict(TypedDict):\n    text: str\n    answers: List[QuizAnswerDict]\n@dataclass\nclass FlashCard:",
        "detail": "avatars.tavus.tavus",
        "documentation": {}
    },
    {
        "label": "ChangeInstructionsAgent",
        "kind": 6,
        "importPath": "basics.change_agent_instructions",
        "description": "basics.change_agent_instructions",
        "peekOfCode": "class ChangeInstructionsAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent. When the user speaks, you listen and respond.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),\n            tts=openai.TTS(),\n            vad=silero.VAD.load()",
        "detail": "basics.change_agent_instructions",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "basics.change_agent_instructions",
        "description": "basics.change_agent_instructions",
        "peekOfCode": "logger = logging.getLogger(\"listen-and-respond\")\nlogger.setLevel(logging.INFO)\nclass ChangeInstructionsAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent. When the user speaks, you listen and respond.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),",
        "detail": "basics.change_agent_instructions",
        "documentation": {}
    },
    {
        "label": "ContextAgent",
        "kind": 6,
        "importPath": "basics.context_variables",
        "description": "basics.context_variables",
        "peekOfCode": "class ContextAgent(Agent):\n    def __init__(self, context_vars=None) -> None:\n        instructions = \"\"\"\n            You are a helpful agent. The user's name is {name}.\n            They are {age} years old and live in {city}.\n        \"\"\"\n        if context_vars:\n            instructions = instructions.format(**context_vars)\n        super().__init__(\n            instructions=instructions,",
        "detail": "basics.context_variables",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "basics.context_variables",
        "description": "basics.context_variables",
        "peekOfCode": "logger = logging.getLogger(\"context-variables\")\nlogger.setLevel(logging.INFO)\nclass ContextAgent(Agent):\n    def __init__(self, context_vars=None) -> None:\n        instructions = \"\"\"\n            You are a helpful agent. The user's name is {name}.\n            They are {age} years old and live in {city}.\n        \"\"\"\n        if context_vars:\n            instructions = instructions.format(**context_vars)",
        "detail": "basics.context_variables",
        "documentation": {}
    },
    {
        "label": "GoodbyeAgent",
        "kind": 6,
        "importPath": "basics.exit_message",
        "description": "basics.exit_message",
        "peekOfCode": "class GoodbyeAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n                When the user wants to stop talking to you, use the end_session function to close the session.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),\n            tts=openai.TTS(),",
        "detail": "basics.exit_message",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "basics.exit_message",
        "description": "basics.exit_message",
        "peekOfCode": "logger = logging.getLogger(\"listen-and-respond\")\nlogger.setLevel(logging.INFO)\nclass GoodbyeAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n                When the user wants to stop talking to you, use the end_session function to close the session.\n            \"\"\",\n            stt=deepgram.STT(),",
        "detail": "basics.exit_message",
        "documentation": {}
    },
    {
        "label": "FunctionAgent",
        "kind": 6,
        "importPath": "basics.function_calling",
        "description": "basics.function_calling",
        "peekOfCode": "class FunctionAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful assistant communicating through voice. Don't use any unpronouncable characters.\n                Note: If asked to print to the console, use the `print_to_console` function.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),\n            tts=openai.TTS(),",
        "detail": "basics.function_calling",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "basics.function_calling",
        "description": "basics.function_calling",
        "peekOfCode": "logger = logging.getLogger(\"function-calling\")\nlogger.setLevel(logging.INFO)\nload_dotenv(dotenv_path=Path(__file__).parent.parent / '.env')\nclass FunctionAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful assistant communicating through voice. Don't use any unpronouncable characters.\n                Note: If asked to print to the console, use the `print_to_console` function.\n            \"\"\",",
        "detail": "basics.function_calling",
        "documentation": {}
    },
    {
        "label": "UninterruptableAgent",
        "kind": 6,
        "importPath": "basics.interrupts_user",
        "description": "basics.interrupts_user",
        "peekOfCode": "class UninterruptableAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful assistant communicating through voice who will interrupt the user if they try to say more than one sentence.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),\n            tts=openai.TTS(),\n            allow_interruptions=False",
        "detail": "basics.interrupts_user",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "basics.interrupts_user",
        "description": "basics.interrupts_user",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass UninterruptableAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful assistant communicating through voice who will interrupt the user if they try to say more than one sentence.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),\n            tts=openai.TTS(),",
        "detail": "basics.interrupts_user",
        "documentation": {}
    },
    {
        "label": "SimpleAgent",
        "kind": 6,
        "importPath": "basics.listen_and_respond",
        "description": "basics.listen_and_respond",
        "peekOfCode": "class SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent. When the user speaks, you listen and respond.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),\n            tts=openai.TTS(),\n            vad=silero.VAD.load()",
        "detail": "basics.listen_and_respond",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "basics.listen_and_respond",
        "description": "basics.listen_and_respond",
        "peekOfCode": "logger = logging.getLogger(\"listen-and-respond\")\nlogger.setLevel(logging.INFO)\nclass SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent. When the user speaks, you listen and respond.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),",
        "detail": "basics.listen_and_respond",
        "documentation": {}
    },
    {
        "label": "FunctionAgent",
        "kind": 6,
        "importPath": "basics.playing_audio",
        "description": "basics.playing_audio",
        "peekOfCode": "class FunctionAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful assistant communicating through voice. Don't use any unpronouncable characters.\n                If asked to play audio, use the `play_audio_file` function.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),\n            tts=openai.TTS(),",
        "detail": "basics.playing_audio",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "basics.playing_audio",
        "description": "basics.playing_audio",
        "peekOfCode": "logger = logging.getLogger(\"function-calling\")\nlogger.setLevel(logging.INFO)\nload_dotenv(dotenv_path=Path(__file__).parent.parent / '.env')\nclass FunctionAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful assistant communicating through voice. Don't use any unpronouncable characters.\n                If asked to play audio, use the `play_audio_file` function.\n            \"\"\",",
        "detail": "basics.playing_audio",
        "documentation": {}
    },
    {
        "label": "UninterruptableAgent",
        "kind": 6,
        "importPath": "basics.uninterruptable",
        "description": "basics.uninterruptable",
        "peekOfCode": "class UninterruptableAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful assistant communicating through voice who is not interruptable.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),\n            tts=openai.TTS(),\n            allow_interruptions=False",
        "detail": "basics.uninterruptable",
        "documentation": {}
    },
    {
        "label": "UserData",
        "kind": 6,
        "importPath": "complex-agents.medical_office_triage.triage",
        "description": "complex-agents.medical_office_triage.triage",
        "peekOfCode": "class UserData:\n    \"\"\"Stores data and agents to be shared across the session\"\"\"\n    personas: dict[str, Agent] = field(default_factory=dict)\n    prev_agent: Optional[Agent] = None\n    ctx: Optional[JobContext] = None\n    def summarize(self) -> str:\n        return \"User data: Medical office triage system\"\nRunContext_T = RunContext[UserData]\nclass BaseAgent(Agent):\n    async def on_enter(self) -> None:",
        "detail": "complex-agents.medical_office_triage.triage",
        "documentation": {}
    },
    {
        "label": "BaseAgent",
        "kind": 6,
        "importPath": "complex-agents.medical_office_triage.triage",
        "description": "complex-agents.medical_office_triage.triage",
        "peekOfCode": "class BaseAgent(Agent):\n    async def on_enter(self) -> None:\n        agent_name = self.__class__.__name__\n        logger.info(f\"Entering {agent_name}\")\n        userdata: UserData = self.session.userdata\n        if userdata.ctx and userdata.ctx.room:\n            await userdata.ctx.room.local_participant.set_attributes({\"agent\": agent_name})\n        chat_ctx = self.chat_ctx.copy()\n        if userdata.prev_agent:\n            items_copy = self._truncate_chat_ctx(",
        "detail": "complex-agents.medical_office_triage.triage",
        "documentation": {}
    },
    {
        "label": "TriageAgent",
        "kind": 6,
        "importPath": "complex-agents.medical_office_triage.triage",
        "description": "complex-agents.medical_office_triage.triage",
        "peekOfCode": "class TriageAgent(BaseAgent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=load_prompt('triage_prompt.yaml'),\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o-mini\"),\n            tts=cartesia.TTS(),\n            vad=silero.VAD.load()\n        )\n    @function_tool",
        "detail": "complex-agents.medical_office_triage.triage",
        "documentation": {}
    },
    {
        "label": "SupportAgent",
        "kind": 6,
        "importPath": "complex-agents.medical_office_triage.triage",
        "description": "complex-agents.medical_office_triage.triage",
        "peekOfCode": "class SupportAgent(BaseAgent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=load_prompt('support_prompt.yaml'),\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o-mini\"),\n            tts=cartesia.TTS(),\n            vad=silero.VAD.load()\n        )\n    @function_tool",
        "detail": "complex-agents.medical_office_triage.triage",
        "documentation": {}
    },
    {
        "label": "BillingAgent",
        "kind": 6,
        "importPath": "complex-agents.medical_office_triage.triage",
        "description": "complex-agents.medical_office_triage.triage",
        "peekOfCode": "class BillingAgent(BaseAgent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=load_prompt('billing_prompt.yaml'),\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o-mini\"),\n            tts=cartesia.TTS(),\n            vad=silero.VAD.load()\n        )\n    @function_tool",
        "detail": "complex-agents.medical_office_triage.triage",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "complex-agents.medical_office_triage.triage",
        "description": "complex-agents.medical_office_triage.triage",
        "peekOfCode": "logger = logging.getLogger(\"medical-office-triage\")\nlogger.setLevel(logging.INFO)\nload_dotenv()\n@dataclass\nclass UserData:\n    \"\"\"Stores data and agents to be shared across the session\"\"\"\n    personas: dict[str, Agent] = field(default_factory=dict)\n    prev_agent: Optional[Agent] = None\n    ctx: Optional[JobContext] = None\n    def summarize(self) -> str:",
        "detail": "complex-agents.medical_office_triage.triage",
        "documentation": {}
    },
    {
        "label": "RunContext_T",
        "kind": 5,
        "importPath": "complex-agents.medical_office_triage.triage",
        "description": "complex-agents.medical_office_triage.triage",
        "peekOfCode": "RunContext_T = RunContext[UserData]\nclass BaseAgent(Agent):\n    async def on_enter(self) -> None:\n        agent_name = self.__class__.__name__\n        logger.info(f\"Entering {agent_name}\")\n        userdata: UserData = self.session.userdata\n        if userdata.ctx and userdata.ctx.room:\n            await userdata.ctx.room.local_participant.set_attributes({\"agent\": agent_name})\n        chat_ctx = self.chat_ctx.copy()\n        if userdata.prev_agent:",
        "detail": "complex-agents.medical_office_triage.triage",
        "documentation": {}
    },
    {
        "label": "load_prompt",
        "kind": 2,
        "importPath": "complex-agents.medical_office_triage.utils",
        "description": "complex-agents.medical_office_triage.utils",
        "peekOfCode": "def load_prompt(filename):\n    \"\"\"Load a prompt from a YAML file.\"\"\"\n    script_dir = os.path.dirname(os.path.abspath(__file__))\n    prompt_path = os.path.join(script_dir, 'prompts', filename)\n    try:\n        with open(prompt_path, 'r') as file:\n            prompt_data = yaml.safe_load(file)\n            return prompt_data.get('instructions', '')\n    except (FileNotFoundError, yaml.YAMLError) as e:\n        print(f\"Error loading prompt file {filename}: {e}\")",
        "detail": "complex-agents.medical_office_triage.utils",
        "documentation": {}
    },
    {
        "label": "add_test_orders",
        "kind": 2,
        "importPath": "complex-agents.personal_shopper.add_test_orders",
        "description": "complex-agents.personal_shopper.add_test_orders",
        "peekOfCode": "def add_test_orders():\n    \"\"\"Add test orders for Shayne Parlo.\"\"\"\n    # Initialize the database\n    db = CustomerDatabase()\n    # Create or get Shayne Parlo\n    first_name = \"Shayne\"\n    last_name = \"Parlo\"\n    customer_id = db.get_or_create_customer(first_name, last_name)\n    logger.info(f\"Customer ID for {first_name} {last_name}: {customer_id}\")\n    # Add test orders",
        "detail": "complex-agents.personal_shopper.add_test_orders",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "complex-agents.personal_shopper.add_test_orders",
        "description": "complex-agents.personal_shopper.add_test_orders",
        "peekOfCode": "logger = logging.getLogger(\"test-orders\")\ndef add_test_orders():\n    \"\"\"Add test orders for Shayne Parlo.\"\"\"\n    # Initialize the database\n    db = CustomerDatabase()\n    # Create or get Shayne Parlo\n    first_name = \"Shayne\"\n    last_name = \"Parlo\"\n    customer_id = db.get_or_create_customer(first_name, last_name)\n    logger.info(f\"Customer ID for {first_name} {last_name}: {customer_id}\")",
        "detail": "complex-agents.personal_shopper.add_test_orders",
        "documentation": {}
    },
    {
        "label": "CustomerDatabase",
        "kind": 6,
        "importPath": "complex-agents.personal_shopper.database",
        "description": "complex-agents.personal_shopper.database",
        "peekOfCode": "class CustomerDatabase:\n    def __init__(self, db_path: str = None):\n        \"\"\"Initialize the customer database.\"\"\"\n        if db_path is None:\n            # Use a default path in the same directory as this file\n            script_dir = os.path.dirname(os.path.abspath(__file__))\n            db_path = os.path.join(script_dir, 'customer_data.db')\n        self.db_path = db_path\n        self._initialize_db()\n    def _initialize_db(self):",
        "detail": "complex-agents.personal_shopper.database",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "complex-agents.personal_shopper.database",
        "description": "complex-agents.personal_shopper.database",
        "peekOfCode": "logger = logging.getLogger(\"personal-shopper-db\")\nlogger.setLevel(logging.INFO)\nclass CustomerDatabase:\n    def __init__(self, db_path: str = None):\n        \"\"\"Initialize the customer database.\"\"\"\n        if db_path is None:\n            # Use a default path in the same directory as this file\n            script_dir = os.path.dirname(os.path.abspath(__file__))\n            db_path = os.path.join(script_dir, 'customer_data.db')\n        self.db_path = db_path",
        "detail": "complex-agents.personal_shopper.database",
        "documentation": {}
    },
    {
        "label": "UserData",
        "kind": 6,
        "importPath": "complex-agents.personal_shopper.personal_shopper",
        "description": "complex-agents.personal_shopper.personal_shopper",
        "peekOfCode": "class UserData:\n    \"\"\"Class to store user data and agents during a call.\"\"\"\n    personas: dict[str, Agent] = field(default_factory=dict)\n    prev_agent: Optional[Agent] = None\n    ctx: Optional[JobContext] = None\n    # Customer information\n    first_name: Optional[str] = None\n    last_name: Optional[str] = None\n    customer_id: Optional[str] = None\n    current_order: Optional[dict] = None",
        "detail": "complex-agents.personal_shopper.personal_shopper",
        "documentation": {}
    },
    {
        "label": "BaseAgent",
        "kind": 6,
        "importPath": "complex-agents.personal_shopper.personal_shopper",
        "description": "complex-agents.personal_shopper.personal_shopper",
        "peekOfCode": "class BaseAgent(Agent):\n    async def on_enter(self) -> None:\n        agent_name = self.__class__.__name__\n        logger.info(f\"Entering {agent_name}\")\n        userdata: UserData = self.session.userdata\n        if userdata.ctx and userdata.ctx.room:\n            await userdata.ctx.room.local_participant.set_attributes({\"agent\": agent_name})\n        # Create a personalized prompt based on customer identification\n        custom_instructions = self.instructions\n        if userdata.is_identified():",
        "detail": "complex-agents.personal_shopper.personal_shopper",
        "documentation": {}
    },
    {
        "label": "TriageAgent",
        "kind": 6,
        "importPath": "complex-agents.personal_shopper.personal_shopper",
        "description": "complex-agents.personal_shopper.personal_shopper",
        "peekOfCode": "class TriageAgent(BaseAgent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=load_prompt('triage_prompt.yaml'),\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o-mini\"),\n            tts=cartesia.TTS(),\n            vad=silero.VAD.load()\n        )\n    @function_tool",
        "detail": "complex-agents.personal_shopper.personal_shopper",
        "documentation": {}
    },
    {
        "label": "SalesAgent",
        "kind": 6,
        "importPath": "complex-agents.personal_shopper.personal_shopper",
        "description": "complex-agents.personal_shopper.personal_shopper",
        "peekOfCode": "class SalesAgent(BaseAgent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=load_prompt('sales_prompt.yaml'),\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o-mini\"),\n            tts=cartesia.TTS(),\n            vad=silero.VAD.load()\n        )\n    @function_tool",
        "detail": "complex-agents.personal_shopper.personal_shopper",
        "documentation": {}
    },
    {
        "label": "ReturnsAgent",
        "kind": 6,
        "importPath": "complex-agents.personal_shopper.personal_shopper",
        "description": "complex-agents.personal_shopper.personal_shopper",
        "peekOfCode": "class ReturnsAgent(BaseAgent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=load_prompt('returns_prompt.yaml'),\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o-mini\"),\n            tts=cartesia.TTS(),\n            vad=silero.VAD.load()\n        )\n    @function_tool",
        "detail": "complex-agents.personal_shopper.personal_shopper",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "complex-agents.personal_shopper.personal_shopper",
        "description": "complex-agents.personal_shopper.personal_shopper",
        "peekOfCode": "logger = logging.getLogger(\"personal-shopper\")\nlogger.setLevel(logging.INFO)\nload_dotenv()\n# Initialize the customer database\ndb = CustomerDatabase()\n@dataclass\nclass UserData:\n    \"\"\"Class to store user data and agents during a call.\"\"\"\n    personas: dict[str, Agent] = field(default_factory=dict)\n    prev_agent: Optional[Agent] = None",
        "detail": "complex-agents.personal_shopper.personal_shopper",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "complex-agents.personal_shopper.personal_shopper",
        "description": "complex-agents.personal_shopper.personal_shopper",
        "peekOfCode": "db = CustomerDatabase()\n@dataclass\nclass UserData:\n    \"\"\"Class to store user data and agents during a call.\"\"\"\n    personas: dict[str, Agent] = field(default_factory=dict)\n    prev_agent: Optional[Agent] = None\n    ctx: Optional[JobContext] = None\n    # Customer information\n    first_name: Optional[str] = None\n    last_name: Optional[str] = None",
        "detail": "complex-agents.personal_shopper.personal_shopper",
        "documentation": {}
    },
    {
        "label": "RunContext_T",
        "kind": 5,
        "importPath": "complex-agents.personal_shopper.personal_shopper",
        "description": "complex-agents.personal_shopper.personal_shopper",
        "peekOfCode": "RunContext_T = RunContext[UserData]\nclass BaseAgent(Agent):\n    async def on_enter(self) -> None:\n        agent_name = self.__class__.__name__\n        logger.info(f\"Entering {agent_name}\")\n        userdata: UserData = self.session.userdata\n        if userdata.ctx and userdata.ctx.room:\n            await userdata.ctx.room.local_participant.set_attributes({\"agent\": agent_name})\n        # Create a personalized prompt based on customer identification\n        custom_instructions = self.instructions",
        "detail": "complex-agents.personal_shopper.personal_shopper",
        "documentation": {}
    },
    {
        "label": "load_prompt",
        "kind": 2,
        "importPath": "complex-agents.personal_shopper.utils",
        "description": "complex-agents.personal_shopper.utils",
        "peekOfCode": "def load_prompt(filename):\n    \"\"\"Load a prompt from a YAML file.\"\"\"\n    script_dir = os.path.dirname(os.path.abspath(__file__))\n    prompt_path = os.path.join(script_dir, 'prompts', filename)\n    try:\n        with open(prompt_path, 'r') as file:\n            prompt_data = yaml.safe_load(file)\n            return prompt_data.get('instructions', '')\n    except (FileNotFoundError, yaml.YAMLError) as e:\n        print(f\"Error loading prompt file {filename}: {e}\")",
        "detail": "complex-agents.personal_shopper.utils",
        "documentation": {}
    },
    {
        "label": "RecordingAgent",
        "kind": 6,
        "importPath": "egress.recording_agent",
        "description": "egress.recording_agent",
        "peekOfCode": "class RecordingAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent. When the user speaks, you listen and respond.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),\n            tts=openai.TTS(),\n            vad=silero.VAD.load()",
        "detail": "egress.recording_agent",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "egress.recording_agent",
        "description": "egress.recording_agent",
        "peekOfCode": "logger = logging.getLogger(\"recording-agent\")\nlogger.setLevel(logging.INFO)\nclass RecordingAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent. When the user speaks, you listen and respond.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),",
        "detail": "egress.recording_agent",
        "documentation": {}
    },
    {
        "label": "SimpleEvaluationAgent",
        "kind": 6,
        "importPath": "evaluating-agents.agent_evals",
        "description": "evaluating-agents.agent_evals",
        "peekOfCode": "class SimpleEvaluationAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are evaluating the performance of a user.\n                Here are the questions you need to ask. These are questions from a fictional world, \n                the answer might not always seem to make sense, but it's important to only grade the answer\n                based on the following question and answer pairs:\n                Q: What is the airspeed velocity of an unladen african swallow?\n                A: 42 miles per hour",
        "detail": "evaluating-agents.agent_evals",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "evaluating-agents.agent_evals",
        "description": "evaluating-agents.agent_evals",
        "peekOfCode": "logger = logging.getLogger(\"openai_llm\")\nlogger.setLevel(logging.INFO)\nclass SimpleEvaluationAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are evaluating the performance of a user.\n                Here are the questions you need to ask. These are questions from a fictional world, \n                the answer might not always seem to make sense, but it's important to only grade the answer\n                based on the following question and answer pairs:",
        "detail": "evaluating-agents.agent_evals",
        "documentation": {}
    },
    {
        "label": "SimpleAgent",
        "kind": 6,
        "importPath": "evaluating-agents.agent_to_test",
        "description": "evaluating-agents.agent_to_test",
        "peekOfCode": "class SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(),\n            tts=openai.TTS(),\n            vad=silero.VAD.load()",
        "detail": "evaluating-agents.agent_to_test",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "evaluating-agents.agent_to_test",
        "description": "evaluating-agents.agent_to_test",
        "peekOfCode": "logger = logging.getLogger(\"openai_llm\")\nlogger.setLevel(logging.INFO)\nclass SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(),",
        "detail": "evaluating-agents.agent_to_test",
        "documentation": {}
    },
    {
        "label": "SimpleAgent",
        "kind": 6,
        "importPath": "events.basic_event",
        "description": "events.basic_event",
        "peekOfCode": "class SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent. When the user speaks, you listen and respond.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),\n            tts=openai.TTS(),\n            vad=silero.VAD.load()",
        "detail": "events.basic_event",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "events.basic_event",
        "description": "events.basic_event",
        "peekOfCode": "logger = logging.getLogger(\"listen-and-respond\")\nlogger.setLevel(logging.INFO)\nclass SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent. When the user speaks, you listen and respond.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),",
        "detail": "events.basic_event",
        "documentation": {}
    },
    {
        "label": "SimpleAgent",
        "kind": 6,
        "importPath": "events.event_emitters",
        "description": "events.event_emitters",
        "peekOfCode": "class SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent. When the user speaks, you listen and respond.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),\n            tts=openai.TTS(),\n            vad=silero.VAD.load()",
        "detail": "events.event_emitters",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "events.event_emitters",
        "description": "events.event_emitters",
        "peekOfCode": "logger = logging.getLogger(\"listen-and-respond\")\nlogger.setLevel(logging.INFO)\nclass SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent. When the user speaks, you listen and respond.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),",
        "detail": "events.event_emitters",
        "documentation": {}
    },
    {
        "label": "SurveyData",
        "kind": 6,
        "importPath": "flows.declarative_flow",
        "description": "flows.declarative_flow",
        "peekOfCode": "class SurveyData:\n    \"\"\"Stores all survey responses and state.\"\"\"\n    responses: Dict[str, str] = field(default_factory=dict)\n    current_stage: str = \"collect_name\"\n    path_taken: List[str] = field(default_factory=list)\n    def record(self, question: str, answer: str):\n        self.responses[question] = answer\n        self.path_taken.append(f\"Stage '{self.current_stage}' - {question}: {answer}\")\nclass BaseAgent(Agent):\n    \"\"\"Base agent with common setup and transition logic.\"\"\"",
        "detail": "flows.declarative_flow",
        "documentation": {}
    },
    {
        "label": "BaseAgent",
        "kind": 6,
        "importPath": "flows.declarative_flow",
        "description": "flows.declarative_flow",
        "peekOfCode": "class BaseAgent(Agent):\n    \"\"\"Base agent with common setup and transition logic.\"\"\"\n    def __init__(self, job_context: JobContext, instructions: str) -> None:\n        self.job_context = job_context\n        super().__init__(\n            instructions=instructions,\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),\n            tts=cartesia.TTS(),\n            vad=silero.VAD.load()",
        "detail": "flows.declarative_flow",
        "documentation": {}
    },
    {
        "label": "DataCollectorAgent",
        "kind": 6,
        "importPath": "flows.declarative_flow",
        "description": "flows.declarative_flow",
        "peekOfCode": "class DataCollectorAgent(BaseAgent):\n    \"\"\"Generic agent for collecting a single piece of data and transitioning.\"\"\"\n    key: str\n    label: str\n    question: str\n    instruction: str\n    def __init__(self, job_context: JobContext) -> None:\n        super().__init__(job_context=job_context, instructions=self.instruction)\n    async def on_enter(self) -> None:\n        await self.session.say(self.question)",
        "detail": "flows.declarative_flow",
        "documentation": {}
    },
    {
        "label": "CollectNameAgent",
        "kind": 6,
        "importPath": "flows.declarative_flow",
        "description": "flows.declarative_flow",
        "peekOfCode": "class CollectNameAgent(DataCollectorAgent):\n    key = \"name\"\n    label = \"Name\"\n    question = \"What is your name?\"\n    instruction = \"Please tell me your name.\"\nclass CollectEmailAgent(DataCollectorAgent):\n    key = \"email\"\n    label = \"Email\"\n    question = \"What is your email address?\"\n    instruction = \"Please tell me your email address.\"",
        "detail": "flows.declarative_flow",
        "documentation": {}
    },
    {
        "label": "CollectEmailAgent",
        "kind": 6,
        "importPath": "flows.declarative_flow",
        "description": "flows.declarative_flow",
        "peekOfCode": "class CollectEmailAgent(DataCollectorAgent):\n    key = \"email\"\n    label = \"Email\"\n    question = \"What is your email address?\"\n    instruction = \"Please tell me your email address.\"\nclass SummaryAgent(BaseAgent):\n    def __init__(self, job_context: JobContext) -> None:\n        super().__init__(job_context=job_context, instructions=\"Summary of your information.\")\n    async def on_enter(self) -> None:\n        sd: SurveyData = self.session.userdata",
        "detail": "flows.declarative_flow",
        "documentation": {}
    },
    {
        "label": "SummaryAgent",
        "kind": 6,
        "importPath": "flows.declarative_flow",
        "description": "flows.declarative_flow",
        "peekOfCode": "class SummaryAgent(BaseAgent):\n    def __init__(self, job_context: JobContext) -> None:\n        super().__init__(job_context=job_context, instructions=\"Summary of your information.\")\n    async def on_enter(self) -> None:\n        sd: SurveyData = self.session.userdata\n        name = sd.responses.get(\"Name\", \"[not provided]\")\n        email = sd.responses.get(\"Email\", \"[not provided]\")\n        summary = f\"Thank you! Here is what I collected:\\n- Name: {name}\\n- Email: {email}\"\n        await self.session.say(summary)\n        logger.info(\"Survey complete. Closing session.\")",
        "detail": "flows.declarative_flow",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "flows.declarative_flow",
        "description": "flows.declarative_flow",
        "peekOfCode": "logger = logging.getLogger(\"declarative-flow\")\nlogger.setLevel(logging.INFO)\n@dataclass\nclass SurveyData:\n    \"\"\"Stores all survey responses and state.\"\"\"\n    responses: Dict[str, str] = field(default_factory=dict)\n    current_stage: str = \"collect_name\"\n    path_taken: List[str] = field(default_factory=list)\n    def record(self, question: str, answer: str):\n        self.responses[question] = answer",
        "detail": "flows.declarative_flow",
        "documentation": {}
    },
    {
        "label": "flow",
        "kind": 5,
        "importPath": "flows.declarative_flow",
        "description": "flows.declarative_flow",
        "peekOfCode": "flow = {\n    \"collect_name\": {\n        \"agent\": CollectNameAgent,\n        \"next\": lambda state: \"collect_email\"\n    },\n    \"collect_email\": {\n        \"agent\": CollectEmailAgent,\n        \"next\": lambda state: \"summary\"\n    },\n    \"summary\": {",
        "detail": "flows.declarative_flow",
        "documentation": {}
    },
    {
        "label": "Stage1Choice",
        "kind": 6,
        "importPath": "flows.multi_stage_flow",
        "description": "flows.multi_stage_flow",
        "peekOfCode": "class Stage1Choice(str, Enum):\n    OPTION_A = \"A\"\n    OPTION_B = \"B\"\nclass Stage2Choice(str, Enum):\n    OPTION_X = \"X\"\n    OPTION_Y = \"Y\"\nclass Stage3Choice(str, Enum):\n    OPTION_M = \"M\"\n    OPTION_N = \"N\"\n@dataclass",
        "detail": "flows.multi_stage_flow",
        "documentation": {}
    },
    {
        "label": "Stage2Choice",
        "kind": 6,
        "importPath": "flows.multi_stage_flow",
        "description": "flows.multi_stage_flow",
        "peekOfCode": "class Stage2Choice(str, Enum):\n    OPTION_X = \"X\"\n    OPTION_Y = \"Y\"\nclass Stage3Choice(str, Enum):\n    OPTION_M = \"M\"\n    OPTION_N = \"N\"\n@dataclass\nclass SurveyData:\n    \"\"\"Stores all survey responses and state.\"\"\"\n    responses: Dict[str, str] = field(default_factory=dict)",
        "detail": "flows.multi_stage_flow",
        "documentation": {}
    },
    {
        "label": "Stage3Choice",
        "kind": 6,
        "importPath": "flows.multi_stage_flow",
        "description": "flows.multi_stage_flow",
        "peekOfCode": "class Stage3Choice(str, Enum):\n    OPTION_M = \"M\"\n    OPTION_N = \"N\"\n@dataclass\nclass SurveyData:\n    \"\"\"Stores all survey responses and state.\"\"\"\n    responses: Dict[str, str] = field(default_factory=dict)\n    current_stage: int = 1\n    current_branch: str = \"\"\n    path_taken: List[str] = field(default_factory=list)",
        "detail": "flows.multi_stage_flow",
        "documentation": {}
    },
    {
        "label": "SurveyData",
        "kind": 6,
        "importPath": "flows.multi_stage_flow",
        "description": "flows.multi_stage_flow",
        "peekOfCode": "class SurveyData:\n    \"\"\"Stores all survey responses and state.\"\"\"\n    responses: Dict[str, str] = field(default_factory=dict)\n    current_stage: int = 1\n    current_branch: str = \"\"\n    path_taken: List[str] = field(default_factory=list)\n    def record(self, question: str, answer: str):\n        self.responses[question] = answer\n        self.path_taken.append(f\"Stage {self.current_stage} ('{self.current_branch}') - {question}: {answer}\")\nclass BaseAgent(Agent):",
        "detail": "flows.multi_stage_flow",
        "documentation": {}
    },
    {
        "label": "BaseAgent",
        "kind": 6,
        "importPath": "flows.multi_stage_flow",
        "description": "flows.multi_stage_flow",
        "peekOfCode": "class BaseAgent(Agent):\n    \"\"\"Base agent class handling job context and common setup.\"\"\"\n    def __init__(self, job_context: JobContext, instructions: str) -> None:\n        self.job_context = job_context\n        super().__init__(\n            instructions=instructions,\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),\n            tts=cartesia.TTS(),\n            vad=silero.VAD.load()",
        "detail": "flows.multi_stage_flow",
        "documentation": {}
    },
    {
        "label": "Stage1Agent",
        "kind": 6,
        "importPath": "flows.multi_stage_flow",
        "description": "flows.multi_stage_flow",
        "peekOfCode": "class Stage1Agent(BaseAgent):\n    def __init__(self, job_context: JobContext) -> None:\n        super().__init__(\n            job_context=job_context,\n            instructions=\"Stage 1: Do you prefer Option A or Option B?\"\n        )\n    async def on_enter(self) -> None:\n        await self.session.say(\"Stage 1: Do you prefer Option A or Option B?\")\n    @function_tool\n    async def collect_stage1(",
        "detail": "flows.multi_stage_flow",
        "documentation": {}
    },
    {
        "label": "Stage1ABranchAgent",
        "kind": 6,
        "importPath": "flows.multi_stage_flow",
        "description": "flows.multi_stage_flow",
        "peekOfCode": "class Stage1ABranchAgent(BaseAgent):\n    def __init__(self, job_context: JobContext) -> None:\n        super().__init__(\n            job_context=job_context,\n            instructions=\"Follow-up: Why do you prefer Option A?\"\n        )\n    async def on_enter(self) -> None:\n        await self.session.say(\"Why do you prefer Option A?\")\n    @function_tool\n    async def collect_A(self, answer: str) -> Agent:",
        "detail": "flows.multi_stage_flow",
        "documentation": {}
    },
    {
        "label": "Stage1BBranchAgent",
        "kind": 6,
        "importPath": "flows.multi_stage_flow",
        "description": "flows.multi_stage_flow",
        "peekOfCode": "class Stage1BBranchAgent(BaseAgent):\n    def __init__(self, job_context: JobContext) -> None:\n        super().__init__(\n            job_context=job_context,\n            instructions=\"Follow-up: Why do you prefer Option B?\"\n        )\n    async def on_enter(self) -> None:\n        await self.session.say(\"Why do you prefer Option B?\")\n    @function_tool\n    async def collect_B(self, answer: str) -> Agent:",
        "detail": "flows.multi_stage_flow",
        "documentation": {}
    },
    {
        "label": "Stage2Agent",
        "kind": 6,
        "importPath": "flows.multi_stage_flow",
        "description": "flows.multi_stage_flow",
        "peekOfCode": "class Stage2Agent(BaseAgent):\n    def __init__(self, job_context: JobContext) -> None:\n        super().__init__(\n            job_context=job_context,\n            instructions=\"Stage 2: Do you prefer Option X or Option Y?\"\n        )\n    async def on_enter(self) -> None:\n        await self.session.say(\"Stage 2: Do you prefer Option X or Option Y?\")\n    @function_tool\n    async def collect_stage2(",
        "detail": "flows.multi_stage_flow",
        "documentation": {}
    },
    {
        "label": "Stage2XBranchAgent",
        "kind": 6,
        "importPath": "flows.multi_stage_flow",
        "description": "flows.multi_stage_flow",
        "peekOfCode": "class Stage2XBranchAgent(BaseAgent):\n    def __init__(self, job_context: JobContext) -> None:\n        super().__init__(\n            job_context=job_context,\n            instructions=\"Follow-up: What appeals to you about Option X?\"\n        )\n    async def on_enter(self) -> None:\n        await self.session.say(\"What appeals to you about Option X?\")\n    @function_tool\n    async def collect_X(self, answer: str) -> Agent:",
        "detail": "flows.multi_stage_flow",
        "documentation": {}
    },
    {
        "label": "Stage2YBranchAgent",
        "kind": 6,
        "importPath": "flows.multi_stage_flow",
        "description": "flows.multi_stage_flow",
        "peekOfCode": "class Stage2YBranchAgent(BaseAgent):\n    def __init__(self, job_context: JobContext) -> None:\n        super().__init__(\n            job_context=job_context,\n            instructions=\"Follow-up: What appeals to you about Option Y?\"\n        )\n    async def on_enter(self) -> None:\n        await self.session.say(\"What appeals to you about Option Y?\")\n    @function_tool\n    async def collect_Y(self, answer: str) -> Agent:",
        "detail": "flows.multi_stage_flow",
        "documentation": {}
    },
    {
        "label": "Stage3Agent",
        "kind": 6,
        "importPath": "flows.multi_stage_flow",
        "description": "flows.multi_stage_flow",
        "peekOfCode": "class Stage3Agent(BaseAgent):\n    def __init__(self, job_context: JobContext) -> None:\n        super().__init__(\n            job_context=job_context,\n            instructions=\"Stage 3: Do you prefer Option M or Option N?\"\n        )\n    async def on_enter(self) -> None:\n        await self.session.say(\"Stage 3: Do you prefer Option M or Option N?\")\n    @function_tool\n    async def collect_stage3(",
        "detail": "flows.multi_stage_flow",
        "documentation": {}
    },
    {
        "label": "Stage3MBranchAgent",
        "kind": 6,
        "importPath": "flows.multi_stage_flow",
        "description": "flows.multi_stage_flow",
        "peekOfCode": "class Stage3MBranchAgent(BaseAgent):\n    def __init__(self, job_context: JobContext) -> None:\n        super().__init__(\n            job_context=job_context,\n            instructions=\"Follow-up: Why do you prefer Option M?\"\n        )\n    async def on_enter(self) -> None:\n        await self.session.say(\"Why do you prefer Option M?\")\n    @function_tool\n    async def collect_M(self, answer: str) -> Agent:",
        "detail": "flows.multi_stage_flow",
        "documentation": {}
    },
    {
        "label": "Stage3NBranchAgent",
        "kind": 6,
        "importPath": "flows.multi_stage_flow",
        "description": "flows.multi_stage_flow",
        "peekOfCode": "class Stage3NBranchAgent(BaseAgent):\n    def __init__(self, job_context: JobContext) -> None:\n        super().__init__(\n            job_context=job_context,\n            instructions=\"Follow-up: Why do you prefer Option N?\"\n        )\n    async def on_enter(self) -> None:\n        await self.session.say(\"Why do you prefer Option N?\")\n    @function_tool\n    async def collect_N(self, answer: str) -> Agent:",
        "detail": "flows.multi_stage_flow",
        "documentation": {}
    },
    {
        "label": "SummaryAgent",
        "kind": 6,
        "importPath": "flows.multi_stage_flow",
        "description": "flows.multi_stage_flow",
        "peekOfCode": "class SummaryAgent(BaseAgent):\n    def __init__(self, job_context: JobContext) -> None:\n        super().__init__(\n            job_context=job_context,\n            instructions=\"Summarize all responses and end the survey.\"\n        )\n    async def on_enter(self) -> None:\n        sd: SurveyData = self.session.userdata\n        summary = \"Thank you for completing the survey! Here are your responses:\\n\"\n        for q, a in sd.responses.items():",
        "detail": "flows.multi_stage_flow",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "flows.multi_stage_flow",
        "description": "flows.multi_stage_flow",
        "peekOfCode": "logger = logging.getLogger(\"complex-flow\")\nlogger.setLevel(logging.INFO)\n# Define enums for the choices at each stage\nclass Stage1Choice(str, Enum):\n    OPTION_A = \"A\"\n    OPTION_B = \"B\"\nclass Stage2Choice(str, Enum):\n    OPTION_X = \"X\"\n    OPTION_Y = \"Y\"\nclass Stage3Choice(str, Enum):",
        "detail": "flows.multi_stage_flow",
        "documentation": {}
    },
    {
        "label": "BaseAgent",
        "kind": 6,
        "importPath": "flows.simple_flow",
        "description": "flows.simple_flow",
        "peekOfCode": "class BaseAgent(Agent):\n    def __init__(self, job_context: JobContext, instructions: str) -> None:\n        self.job_context = job_context\n        super().__init__(\n            instructions=instructions,\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),\n            tts=cartesia.TTS(),\n            vad=silero.VAD.load()\n        )",
        "detail": "flows.simple_flow",
        "documentation": {}
    },
    {
        "label": "GreetingAgent",
        "kind": 6,
        "importPath": "flows.simple_flow",
        "description": "flows.simple_flow",
        "peekOfCode": "class GreetingAgent(BaseAgent):\n    def __init__(self, job_context: JobContext) -> None:\n        super().__init__(\n            job_context=job_context,\n            instructions=\"\"\"\n                You are a helpful assistant. Start by greeting the user and asking for their name.\n            \"\"\"\n        )\n    async def on_enter(self) -> None:\n        await self.session.say(\"Hello! I'm here to help you. What's your name?\")",
        "detail": "flows.simple_flow",
        "documentation": {}
    },
    {
        "label": "AskColorAgent",
        "kind": 6,
        "importPath": "flows.simple_flow",
        "description": "flows.simple_flow",
        "peekOfCode": "class AskColorAgent(BaseAgent):\n    def __init__(self, name: str, job_context: JobContext) -> None:\n        super().__init__(\n            job_context=job_context,\n            instructions=f\"You are talking to {name}. Ask the user what their favorite color is.\"\n        )\n        self.name = name\n    async def on_enter(self) -> None:\n        await self.session.say(f\"{self.name}, what is your favorite color?\")\n    @function_tool",
        "detail": "flows.simple_flow",
        "documentation": {}
    },
    {
        "label": "SummaryAgent",
        "kind": 6,
        "importPath": "flows.simple_flow",
        "description": "flows.simple_flow",
        "peekOfCode": "class SummaryAgent(BaseAgent):\n    def __init__(self, name: str, color: str, job_context: JobContext) -> None:\n        super().__init__(\n            job_context=job_context,\n            instructions=\"Summarize the collected information and end the conversation.\"\n        )\n        self.name = name\n        self.color = color\n    async def on_enter(self) -> None:\n        await self.session.say(",
        "detail": "flows.simple_flow",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "flows.simple_flow",
        "description": "flows.simple_flow",
        "peekOfCode": "logger = logging.getLogger(\"simple-flow\")\nlogger.setLevel(logging.INFO)\nclass BaseAgent(Agent):\n    def __init__(self, job_context: JobContext, instructions: str) -> None:\n        self.job_context = job_context\n        super().__init__(\n            instructions=instructions,\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),\n            tts=cartesia.TTS(),",
        "detail": "flows.simple_flow",
        "documentation": {}
    },
    {
        "label": "show_startup_screen",
        "kind": 2,
        "importPath": "hardware.pi_zero_transcriber",
        "description": "hardware.pi_zero_transcriber",
        "peekOfCode": "def show_startup_screen():\n    draw.rectangle((0, 0, width, height), fill=(0, 0, 0))\n    draw.text((10, 10), \"LiveKit\", font=title_font, fill=(255, 255, 255))\n    draw.text((10, 40), \"Transcription\", font=title_font, fill=(255, 255, 255))\n    draw.text((10, 80), \"Starting...\", font=font, fill=(200, 200, 200))\n    screen.display(image)\n# Display transcription text\ndef display_transcription(text):\n    # Clear screen\n    draw.rectangle((0, 0, width, height), fill=(0, 0, 0))",
        "detail": "hardware.pi_zero_transcriber",
        "documentation": {}
    },
    {
        "label": "display_transcription",
        "kind": 2,
        "importPath": "hardware.pi_zero_transcriber",
        "description": "hardware.pi_zero_transcriber",
        "peekOfCode": "def display_transcription(text):\n    # Clear screen\n    draw.rectangle((0, 0, width, height), fill=(0, 0, 0))\n    # Add title\n    draw.text((10, 10), \"Transcription\", font=title_font, fill=(255, 255, 255))\n    # Wrap and display the transcribed text\n    y_position = 50\n    wrapped_text = textwrap.wrap(text, width=26)  # Adjust width as needed\n    # Display only the most recent lines that fit on screen\n    max_lines = 9  # Approximate number of lines that fit",
        "detail": "hardware.pi_zero_transcriber",
        "documentation": {}
    },
    {
        "label": "SPI_SPEED_MHZ",
        "kind": 5,
        "importPath": "hardware.pi_zero_transcriber",
        "description": "hardware.pi_zero_transcriber",
        "peekOfCode": "SPI_SPEED_MHZ = 20\nscreen = st7789.ST7789(\n    rotation=90,   # Needed to display the right way up on Pirate Audio\n    port=0,        # SPI port\n    cs=1,          # SPI port Chip-select channel\n    dc=9,          # BCM pin used for data/command\n    backlight=13,\n    spi_speed_hz=SPI_SPEED_MHZ * 1000 * 1000\n)\nwidth = screen.width",
        "detail": "hardware.pi_zero_transcriber",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "hardware.pi_zero_transcriber",
        "description": "hardware.pi_zero_transcriber",
        "peekOfCode": "screen = st7789.ST7789(\n    rotation=90,   # Needed to display the right way up on Pirate Audio\n    port=0,        # SPI port\n    cs=1,          # SPI port Chip-select channel\n    dc=9,          # BCM pin used for data/command\n    backlight=13,\n    spi_speed_hz=SPI_SPEED_MHZ * 1000 * 1000\n)\nwidth = screen.width\nheight = screen.height",
        "detail": "hardware.pi_zero_transcriber",
        "documentation": {}
    },
    {
        "label": "width",
        "kind": 5,
        "importPath": "hardware.pi_zero_transcriber",
        "description": "hardware.pi_zero_transcriber",
        "peekOfCode": "width = screen.width\nheight = screen.height\n# Create image for display\nimage = Image.new(\"RGB\", (240, 240), (0, 0, 0))\ndraw = ImageDraw.Draw(image)\n# Set up font\nfont = ImageFont.truetype(\"/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf\", 18)\ntitle_font = ImageFont.truetype(\"/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf\", 22)\n# Display startup screen\ndef show_startup_screen():",
        "detail": "hardware.pi_zero_transcriber",
        "documentation": {}
    },
    {
        "label": "height",
        "kind": 5,
        "importPath": "hardware.pi_zero_transcriber",
        "description": "hardware.pi_zero_transcriber",
        "peekOfCode": "height = screen.height\n# Create image for display\nimage = Image.new(\"RGB\", (240, 240), (0, 0, 0))\ndraw = ImageDraw.Draw(image)\n# Set up font\nfont = ImageFont.truetype(\"/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf\", 18)\ntitle_font = ImageFont.truetype(\"/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf\", 22)\n# Display startup screen\ndef show_startup_screen():\n    draw.rectangle((0, 0, width, height), fill=(0, 0, 0))",
        "detail": "hardware.pi_zero_transcriber",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "hardware.pi_zero_transcriber",
        "description": "hardware.pi_zero_transcriber",
        "peekOfCode": "image = Image.new(\"RGB\", (240, 240), (0, 0, 0))\ndraw = ImageDraw.Draw(image)\n# Set up font\nfont = ImageFont.truetype(\"/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf\", 18)\ntitle_font = ImageFont.truetype(\"/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf\", 22)\n# Display startup screen\ndef show_startup_screen():\n    draw.rectangle((0, 0, width, height), fill=(0, 0, 0))\n    draw.text((10, 10), \"LiveKit\", font=title_font, fill=(255, 255, 255))\n    draw.text((10, 40), \"Transcription\", font=title_font, fill=(255, 255, 255))",
        "detail": "hardware.pi_zero_transcriber",
        "documentation": {}
    },
    {
        "label": "draw",
        "kind": 5,
        "importPath": "hardware.pi_zero_transcriber",
        "description": "hardware.pi_zero_transcriber",
        "peekOfCode": "draw = ImageDraw.Draw(image)\n# Set up font\nfont = ImageFont.truetype(\"/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf\", 18)\ntitle_font = ImageFont.truetype(\"/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf\", 22)\n# Display startup screen\ndef show_startup_screen():\n    draw.rectangle((0, 0, width, height), fill=(0, 0, 0))\n    draw.text((10, 10), \"LiveKit\", font=title_font, fill=(255, 255, 255))\n    draw.text((10, 40), \"Transcription\", font=title_font, fill=(255, 255, 255))\n    draw.text((10, 80), \"Starting...\", font=font, fill=(200, 200, 200))",
        "detail": "hardware.pi_zero_transcriber",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": "hardware.pi_zero_transcriber",
        "description": "hardware.pi_zero_transcriber",
        "peekOfCode": "font = ImageFont.truetype(\"/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf\", 18)\ntitle_font = ImageFont.truetype(\"/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf\", 22)\n# Display startup screen\ndef show_startup_screen():\n    draw.rectangle((0, 0, width, height), fill=(0, 0, 0))\n    draw.text((10, 10), \"LiveKit\", font=title_font, fill=(255, 255, 255))\n    draw.text((10, 40), \"Transcription\", font=title_font, fill=(255, 255, 255))\n    draw.text((10, 80), \"Starting...\", font=font, fill=(200, 200, 200))\n    screen.display(image)\n# Display transcription text",
        "detail": "hardware.pi_zero_transcriber",
        "documentation": {}
    },
    {
        "label": "title_font",
        "kind": 5,
        "importPath": "hardware.pi_zero_transcriber",
        "description": "hardware.pi_zero_transcriber",
        "peekOfCode": "title_font = ImageFont.truetype(\"/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf\", 22)\n# Display startup screen\ndef show_startup_screen():\n    draw.rectangle((0, 0, width, height), fill=(0, 0, 0))\n    draw.text((10, 10), \"LiveKit\", font=title_font, fill=(255, 255, 255))\n    draw.text((10, 40), \"Transcription\", font=title_font, fill=(255, 255, 255))\n    draw.text((10, 80), \"Starting...\", font=font, fill=(200, 200, 200))\n    screen.display(image)\n# Display transcription text\ndef display_transcription(text):",
        "detail": "hardware.pi_zero_transcriber",
        "documentation": {}
    },
    {
        "label": "SimpleAgent",
        "kind": 6,
        "importPath": "home_assistant.homeautomation",
        "description": "home_assistant.homeautomation",
        "peekOfCode": "class SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent that can control home automation devices.\n                You can list available devices and control them by turning them on or off.\n                When asked about devices, first list what's available and then help control them.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(),",
        "detail": "home_assistant.homeautomation",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "home_assistant.homeautomation",
        "description": "home_assistant.homeautomation",
        "peekOfCode": "logger = logging.getLogger(\"listen-and-respond\")\nlogger.setLevel(logging.INFO)\nWAKE_WORD = \"hey casa\"\nHOMEAUTOMAITON_TOKEN = os.getenv(\"HOMEAUTOMAITON_TOKEN\")\nHOMEAUTOMATION_URL = os.getenv(\"HOMEAUTOMATION_URL\", \"http://localhost:8123\")\nclass SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent that can control home automation devices.",
        "detail": "home_assistant.homeautomation",
        "documentation": {}
    },
    {
        "label": "WAKE_WORD",
        "kind": 5,
        "importPath": "home_assistant.homeautomation",
        "description": "home_assistant.homeautomation",
        "peekOfCode": "WAKE_WORD = \"hey casa\"\nHOMEAUTOMAITON_TOKEN = os.getenv(\"HOMEAUTOMAITON_TOKEN\")\nHOMEAUTOMATION_URL = os.getenv(\"HOMEAUTOMATION_URL\", \"http://localhost:8123\")\nclass SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent that can control home automation devices.\n                You can list available devices and control them by turning them on or off.\n                When asked about devices, first list what's available and then help control them.",
        "detail": "home_assistant.homeautomation",
        "documentation": {}
    },
    {
        "label": "HOMEAUTOMAITON_TOKEN",
        "kind": 5,
        "importPath": "home_assistant.homeautomation",
        "description": "home_assistant.homeautomation",
        "peekOfCode": "HOMEAUTOMAITON_TOKEN = os.getenv(\"HOMEAUTOMAITON_TOKEN\")\nHOMEAUTOMATION_URL = os.getenv(\"HOMEAUTOMATION_URL\", \"http://localhost:8123\")\nclass SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent that can control home automation devices.\n                You can list available devices and control them by turning them on or off.\n                When asked about devices, first list what's available and then help control them.\n            \"\"\",",
        "detail": "home_assistant.homeautomation",
        "documentation": {}
    },
    {
        "label": "HOMEAUTOMATION_URL",
        "kind": 5,
        "importPath": "home_assistant.homeautomation",
        "description": "home_assistant.homeautomation",
        "peekOfCode": "HOMEAUTOMATION_URL = os.getenv(\"HOMEAUTOMATION_URL\", \"http://localhost:8123\")\nclass SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent that can control home automation devices.\n                You can list available devices and control them by turning them on or off.\n                When asked about devices, first list what's available and then help control them.\n            \"\"\",\n            stt=deepgram.STT(),",
        "detail": "home_assistant.homeautomation",
        "documentation": {}
    },
    {
        "label": "MyAgent",
        "kind": 6,
        "importPath": "mcp.agent",
        "description": "mcp.agent",
        "peekOfCode": "class MyAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=(\n                \"You can retrieve data via the MCP server. The interface is voice-based: \"\n                \"accept spoken user queries and respond with synthesized speech.\"\n            ),\n        )\n    async def on_enter(self):\n        self.session.generate_reply()",
        "detail": "mcp.agent",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "mcp.agent",
        "description": "mcp.agent",
        "peekOfCode": "logger = logging.getLogger(\"mcp-agent\")\nload_dotenv(dotenv_path=Path(__file__).parent.parent / '.env')\nclass MyAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=(\n                \"You can retrieve data via the MCP server. The interface is voice-based: \"\n                \"accept spoken user queries and respond with synthesized speech.\"\n            ),\n        )",
        "detail": "mcp.agent",
        "documentation": {}
    },
    {
        "label": "run_async",
        "kind": 2,
        "importPath": "mcp.server",
        "description": "mcp.server",
        "peekOfCode": "def run_async(coroutine):\n    \"\"\"\n    Helper function to run a coroutine either in the current loop or a new one\n    \"\"\"\n    try:\n        loop = asyncio.get_event_loop()\n        if loop.is_running():\n            with concurrent.futures.ThreadPoolExecutor() as executor:\n                future = executor.submit(asyncio.run, coroutine)\n                return future.result()",
        "detail": "mcp.server",
        "documentation": {}
    },
    {
        "label": "generate_token",
        "kind": 2,
        "importPath": "mcp.server",
        "description": "mcp.server",
        "peekOfCode": "def generate_token(identity: str, name: str, room: str) -> str:\n    \"\"\"\n    Generate a LiveKit access token\n    Args:\n        identity: Unique identifier for the participant\n        name: Display name of the participant\n        room: Name of the room to join\n    Returns:\n        JWT token string\n    \"\"\"",
        "detail": "mcp.server",
        "documentation": {}
    },
    {
        "label": "delete_room",
        "kind": 2,
        "importPath": "mcp.server",
        "description": "mcp.server",
        "peekOfCode": "def delete_room(room: str) -> bool:\n    \"\"\"\n    Delete a room by name\n    Args:\n        room: Name of the room to delete\n    Returns:\n        True if successful\n    \"\"\"\n    return run_async(delete_livekit_room(room))\n@mcp.tool()",
        "detail": "mcp.server",
        "documentation": {}
    },
    {
        "label": "list_participants",
        "kind": 2,
        "importPath": "mcp.server",
        "description": "mcp.server",
        "peekOfCode": "def list_participants(room: str) -> list[dict]:\n    \"\"\"\n    List all participants in a room\n    Args:\n        room: Name of the room to list participants from\n    Returns:\n        List of participant information dictionaries\n    \"\"\"\n    return run_async(fetch_room_participants(room))\n@mcp.tool()",
        "detail": "mcp.server",
        "documentation": {}
    },
    {
        "label": "send_chat",
        "kind": 2,
        "importPath": "mcp.server",
        "description": "mcp.server",
        "peekOfCode": "def send_chat(room: str, message: str, sender: str = \"System\", recipients: list = None) -> bool:\n    \"\"\"\n    Send a chat message to a room\n    Args:\n        room: Name of the room to send the message to\n        message: The chat message to send\n        sender: Name of the sender (default: \"System\")\n        recipients: List of participant identities to send to (default: None, which means all participants)\n    Returns:\n        True if successful",
        "detail": "mcp.server",
        "documentation": {}
    },
    {
        "label": "generate_join_link",
        "kind": 2,
        "importPath": "mcp.server",
        "description": "mcp.server",
        "peekOfCode": "def generate_join_link(room: str, identity: str = \"anonymous\", name: str = \"Anonymous\") -> str:\n    \"\"\"\n    Generate a LiveKit join link\n    Args:\n        room: Name of the room to join\n        identity: Unique identifier for the participant (default: \"anonymous\")\n        name: Display name of the participant (default: \"Anonymous\")\n    Returns:\n        URL string to join the LiveKit room\n    \"\"\"",
        "detail": "mcp.server",
        "documentation": {}
    },
    {
        "label": "mcp",
        "kind": 5,
        "importPath": "mcp.server",
        "description": "mcp.server",
        "peekOfCode": "mcp = FastMCP(\"LiveKit MCP\")\ndef run_async(coroutine):\n    \"\"\"\n    Helper function to run a coroutine either in the current loop or a new one\n    \"\"\"\n    try:\n        loop = asyncio.get_event_loop()\n        if loop.is_running():\n            with concurrent.futures.ThreadPoolExecutor() as executor:\n                future = executor.submit(asyncio.run, coroutine)",
        "detail": "mcp.server",
        "documentation": {}
    },
    {
        "label": "receive_metrics",
        "kind": 2,
        "importPath": "metrics.send-metrics-to-3p.metrics_server.app",
        "description": "metrics.send-metrics-to-3p.metrics_server.app",
        "peekOfCode": "def receive_metrics(metric_type):\n    \"\"\"\n    Endpoint to receive metrics data from the LiveKit agent\n    \"\"\"\n    if metric_type not in metrics_types:\n        return jsonify({\"error\": f\"Invalid metric type: {metric_type}\"}), 400\n    data = request.json\n    # Add timestamp for when server received it\n    data['received_at'] = datetime.now().isoformat()\n    metrics_data[metric_type].append(data)",
        "detail": "metrics.send-metrics-to-3p.metrics_server.app",
        "documentation": {}
    },
    {
        "label": "dashboard",
        "kind": 2,
        "importPath": "metrics.send-metrics-to-3p.metrics_server.app",
        "description": "metrics.send-metrics-to-3p.metrics_server.app",
        "peekOfCode": "def dashboard():\n    \"\"\"Display metrics dashboard\"\"\"\n    return render_template('dashboard.html', metrics_types=metrics_types)\n@app.route('/api/metrics')\ndef get_metrics():\n    \"\"\"API endpoint to get all metrics data for AJAX requests\"\"\"\n    return jsonify(metrics_data)\n@app.route('/api/metrics/<metric_type>')\ndef get_metric_type(metric_type):\n    \"\"\"API endpoint to get metrics data for a specific type\"\"\"",
        "detail": "metrics.send-metrics-to-3p.metrics_server.app",
        "documentation": {}
    },
    {
        "label": "get_metrics",
        "kind": 2,
        "importPath": "metrics.send-metrics-to-3p.metrics_server.app",
        "description": "metrics.send-metrics-to-3p.metrics_server.app",
        "peekOfCode": "def get_metrics():\n    \"\"\"API endpoint to get all metrics data for AJAX requests\"\"\"\n    return jsonify(metrics_data)\n@app.route('/api/metrics/<metric_type>')\ndef get_metric_type(metric_type):\n    \"\"\"API endpoint to get metrics data for a specific type\"\"\"\n    if metric_type not in metrics_types:\n        return jsonify({\"error\": f\"Invalid metric type: {metric_type}\"}), 400\n    return jsonify(metrics_data[metric_type])\nif __name__ == '__main__':",
        "detail": "metrics.send-metrics-to-3p.metrics_server.app",
        "documentation": {}
    },
    {
        "label": "get_metric_type",
        "kind": 2,
        "importPath": "metrics.send-metrics-to-3p.metrics_server.app",
        "description": "metrics.send-metrics-to-3p.metrics_server.app",
        "peekOfCode": "def get_metric_type(metric_type):\n    \"\"\"API endpoint to get metrics data for a specific type\"\"\"\n    if metric_type not in metrics_types:\n        return jsonify({\"error\": f\"Invalid metric type: {metric_type}\"}), 400\n    return jsonify(metrics_data[metric_type])\nif __name__ == '__main__':\n    app.run(debug=True, host='0.0.0.0', port=5001)",
        "detail": "metrics.send-metrics-to-3p.metrics_server.app",
        "documentation": {}
    },
    {
        "label": "template_dir",
        "kind": 5,
        "importPath": "metrics.send-metrics-to-3p.metrics_server.app",
        "description": "metrics.send-metrics-to-3p.metrics_server.app",
        "peekOfCode": "template_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), 'templates'))\napp = Flask(__name__, template_folder=template_dir)\n# Store metrics in memory (for simplicity)\nmetrics_data = defaultdict(list)\nmetrics_types = [\"llm\", \"stt\", \"tts\", \"eou\", \"vad\"]\n@app.route('/metrics/<metric_type>', methods=['POST'])\ndef receive_metrics(metric_type):\n    \"\"\"\n    Endpoint to receive metrics data from the LiveKit agent\n    \"\"\"",
        "detail": "metrics.send-metrics-to-3p.metrics_server.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "metrics.send-metrics-to-3p.metrics_server.app",
        "description": "metrics.send-metrics-to-3p.metrics_server.app",
        "peekOfCode": "app = Flask(__name__, template_folder=template_dir)\n# Store metrics in memory (for simplicity)\nmetrics_data = defaultdict(list)\nmetrics_types = [\"llm\", \"stt\", \"tts\", \"eou\", \"vad\"]\n@app.route('/metrics/<metric_type>', methods=['POST'])\ndef receive_metrics(metric_type):\n    \"\"\"\n    Endpoint to receive metrics data from the LiveKit agent\n    \"\"\"\n    if metric_type not in metrics_types:",
        "detail": "metrics.send-metrics-to-3p.metrics_server.app",
        "documentation": {}
    },
    {
        "label": "metrics_data",
        "kind": 5,
        "importPath": "metrics.send-metrics-to-3p.metrics_server.app",
        "description": "metrics.send-metrics-to-3p.metrics_server.app",
        "peekOfCode": "metrics_data = defaultdict(list)\nmetrics_types = [\"llm\", \"stt\", \"tts\", \"eou\", \"vad\"]\n@app.route('/metrics/<metric_type>', methods=['POST'])\ndef receive_metrics(metric_type):\n    \"\"\"\n    Endpoint to receive metrics data from the LiveKit agent\n    \"\"\"\n    if metric_type not in metrics_types:\n        return jsonify({\"error\": f\"Invalid metric type: {metric_type}\"}), 400\n    data = request.json",
        "detail": "metrics.send-metrics-to-3p.metrics_server.app",
        "documentation": {}
    },
    {
        "label": "metrics_types",
        "kind": 5,
        "importPath": "metrics.send-metrics-to-3p.metrics_server.app",
        "description": "metrics.send-metrics-to-3p.metrics_server.app",
        "peekOfCode": "metrics_types = [\"llm\", \"stt\", \"tts\", \"eou\", \"vad\"]\n@app.route('/metrics/<metric_type>', methods=['POST'])\ndef receive_metrics(metric_type):\n    \"\"\"\n    Endpoint to receive metrics data from the LiveKit agent\n    \"\"\"\n    if metric_type not in metrics_types:\n        return jsonify({\"error\": f\"Invalid metric type: {metric_type}\"}), 400\n    data = request.json\n    # Add timestamp for when server received it",
        "detail": "metrics.send-metrics-to-3p.metrics_server.app",
        "documentation": {}
    },
    {
        "label": "CombinedMetricsAgent",
        "kind": 6,
        "importPath": "metrics.send-metrics-to-3p.send_metrics_to_3p",
        "description": "metrics.send-metrics-to-3p.send_metrics_to_3p",
        "peekOfCode": "class CombinedMetricsAgent(Agent):\n    \"\"\"\n    A comprehensive agent that tracks all metrics: LLM, STT, TTS, and VAD.\n    \"\"\"\n    def __init__(self) -> None:\n        # Initialize components\n        llm = openai.LLM(model=\"gpt-4o-mini\")\n        stt = deepgram.STT()\n        tts = openai.TTS()\n        silero_vad = silero.VAD.load()",
        "detail": "metrics.send-metrics-to-3p.send_metrics_to_3p",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "metrics.send-metrics-to-3p.send_metrics_to_3p",
        "description": "metrics.send-metrics-to-3p.send_metrics_to_3p",
        "peekOfCode": "logger = logging.getLogger(\"combined-metrics\")\nlogger.setLevel(logging.INFO)\n# Reduce log level for HTTP-related libraries\nlogging.getLogger(\"urllib3\").setLevel(logging.WARNING)\nlogging.getLogger(\"requests\").setLevel(logging.WARNING)\nload_dotenv(dotenv_path=Path(__file__).parent.parent / '.env')\n# Configure the metrics server URL\nMETRICS_SERVER_URL = os.getenv(\"METRICS_SERVER_URL\", \"http://localhost:5001\") \nclass CombinedMetricsAgent(Agent):\n    \"\"\"",
        "detail": "metrics.send-metrics-to-3p.send_metrics_to_3p",
        "documentation": {}
    },
    {
        "label": "METRICS_SERVER_URL",
        "kind": 5,
        "importPath": "metrics.send-metrics-to-3p.send_metrics_to_3p",
        "description": "metrics.send-metrics-to-3p.send_metrics_to_3p",
        "peekOfCode": "METRICS_SERVER_URL = os.getenv(\"METRICS_SERVER_URL\", \"http://localhost:5001\") \nclass CombinedMetricsAgent(Agent):\n    \"\"\"\n    A comprehensive agent that tracks all metrics: LLM, STT, TTS, and VAD.\n    \"\"\"\n    def __init__(self) -> None:\n        # Initialize components\n        llm = openai.LLM(model=\"gpt-4o-mini\")\n        stt = deepgram.STT()\n        tts = openai.TTS()",
        "detail": "metrics.send-metrics-to-3p.send_metrics_to_3p",
        "documentation": {}
    },
    {
        "label": "LLMMetricsAgent",
        "kind": 6,
        "importPath": "metrics.metrics_llm",
        "description": "metrics.metrics_llm",
        "peekOfCode": "class LLMMetricsAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),\n            tts=openai.TTS(),\n            vad=silero.VAD.load()",
        "detail": "metrics.metrics_llm",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "metrics.metrics_llm",
        "description": "metrics.metrics_llm",
        "peekOfCode": "logger = logging.getLogger(\"metrics-llm\")\nlogger.setLevel(logging.INFO)\nconsole = Console()\nload_dotenv(dotenv_path=Path(__file__).parent.parent / '.env')\nclass LLMMetricsAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n            \"\"\",",
        "detail": "metrics.metrics_llm",
        "documentation": {}
    },
    {
        "label": "console",
        "kind": 5,
        "importPath": "metrics.metrics_llm",
        "description": "metrics.metrics_llm",
        "peekOfCode": "console = Console()\nload_dotenv(dotenv_path=Path(__file__).parent.parent / '.env')\nclass LLMMetricsAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),",
        "detail": "metrics.metrics_llm",
        "documentation": {}
    },
    {
        "label": "STTMetricsAgent",
        "kind": 6,
        "importPath": "metrics.metrics_stt",
        "description": "metrics.metrics_stt",
        "peekOfCode": "class STTMetricsAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),\n            tts=openai.TTS(),\n            vad=silero.VAD.load()",
        "detail": "metrics.metrics_stt",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "metrics.metrics_stt",
        "description": "metrics.metrics_stt",
        "peekOfCode": "logger = logging.getLogger(\"metrics-stt\")\nlogger.setLevel(logging.INFO)\nconsole = Console()\nload_dotenv(dotenv_path=Path(__file__).parent.parent / '.env')\nclass STTMetricsAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n            \"\"\",",
        "detail": "metrics.metrics_stt",
        "documentation": {}
    },
    {
        "label": "console",
        "kind": 5,
        "importPath": "metrics.metrics_stt",
        "description": "metrics.metrics_stt",
        "peekOfCode": "console = Console()\nload_dotenv(dotenv_path=Path(__file__).parent.parent / '.env')\nclass STTMetricsAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),",
        "detail": "metrics.metrics_stt",
        "documentation": {}
    },
    {
        "label": "TTSMetricsAgent",
        "kind": 6,
        "importPath": "metrics.metrics_tts",
        "description": "metrics.metrics_tts",
        "peekOfCode": "class TTSMetricsAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),\n            tts=openai.TTS(),\n            vad=silero.VAD.load()",
        "detail": "metrics.metrics_tts",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "metrics.metrics_tts",
        "description": "metrics.metrics_tts",
        "peekOfCode": "logger = logging.getLogger(\"metrics-tts\")\nlogger.setLevel(logging.INFO)\nconsole = Console()\nload_dotenv(dotenv_path=Path(__file__).parent.parent / '.env')\nclass TTSMetricsAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n            \"\"\",",
        "detail": "metrics.metrics_tts",
        "documentation": {}
    },
    {
        "label": "console",
        "kind": 5,
        "importPath": "metrics.metrics_tts",
        "description": "metrics.metrics_tts",
        "peekOfCode": "console = Console()\nload_dotenv(dotenv_path=Path(__file__).parent.parent / '.env')\nclass TTSMetricsAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),",
        "detail": "metrics.metrics_tts",
        "documentation": {}
    },
    {
        "label": "VADMetricsAgent",
        "kind": 6,
        "importPath": "metrics.metrics_vad",
        "description": "metrics.metrics_vad",
        "peekOfCode": "class VADMetricsAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),\n            tts=openai.TTS(),\n            vad=silero.VAD.load()",
        "detail": "metrics.metrics_vad",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "metrics.metrics_vad",
        "description": "metrics.metrics_vad",
        "peekOfCode": "logger = logging.getLogger(\"metrics-vad\")\nlogger.setLevel(logging.INFO)\nconsole = Console()\nload_dotenv(dotenv_path=Path(__file__).parent.parent / '.env')\nclass VADMetricsAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n            \"\"\",",
        "detail": "metrics.metrics_vad",
        "documentation": {}
    },
    {
        "label": "console",
        "kind": 5,
        "importPath": "metrics.metrics_vad",
        "description": "metrics.metrics_vad",
        "peekOfCode": "console = Console()\nload_dotenv(dotenv_path=Path(__file__).parent.parent / '.env')\nclass VADMetricsAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),",
        "detail": "metrics.metrics_vad",
        "documentation": {}
    },
    {
        "label": "ShortAgent",
        "kind": 6,
        "importPath": "multi-agent.long_or_short_agent",
        "description": "multi-agent.long_or_short_agent",
        "peekOfCode": "class ShortAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent. When the user speaks, you listen and respond. Be as brief as possible. Arguably too brief.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),\n            tts=openai.TTS(\n                model=\"gpt-4o-mini-tts\",",
        "detail": "multi-agent.long_or_short_agent",
        "documentation": {}
    },
    {
        "label": "LongAgent",
        "kind": 6,
        "importPath": "multi-agent.long_or_short_agent",
        "description": "multi-agent.long_or_short_agent",
        "peekOfCode": "class LongAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent. When the user speaks, you listen and respond in overly verbose, flowery, obnoxiously detailed sentences.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),\n            tts=openai.TTS(\n                model=\"gpt-4o-mini-tts\",",
        "detail": "multi-agent.long_or_short_agent",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "multi-agent.long_or_short_agent",
        "description": "multi-agent.long_or_short_agent",
        "peekOfCode": "logger = logging.getLogger(\"listen-and-respond\")\nlogger.setLevel(logging.INFO)\nclass ShortAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent. When the user speaks, you listen and respond. Be as brief as possible. Arguably too brief.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),",
        "detail": "multi-agent.long_or_short_agent",
        "documentation": {}
    },
    {
        "label": "SimpleAgent",
        "kind": 6,
        "importPath": "pipeline-llm.anthropic_llm",
        "description": "pipeline-llm.anthropic_llm",
        "peekOfCode": "class SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=anthropic.LLM(model=\"claude-3-5-sonnet-20240620\"),\n            tts=openai.TTS(instructions=\"You are a helpful assistant with a pleasant voice. Speak in a natural, conversational tone.\"),\n            vad=silero.VAD.load()",
        "detail": "pipeline-llm.anthropic_llm",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "pipeline-llm.anthropic_llm",
        "description": "pipeline-llm.anthropic_llm",
        "peekOfCode": "logger = logging.getLogger(\"anthropic_llm\")\nlogger.setLevel(logging.INFO)\nclass SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=anthropic.LLM(model=\"claude-3-5-sonnet-20240620\"),",
        "detail": "pipeline-llm.anthropic_llm",
        "documentation": {}
    },
    {
        "label": "SimpleAgent",
        "kind": 6,
        "importPath": "pipeline-llm.cerebras_llm",
        "description": "pipeline-llm.cerebras_llm",
        "peekOfCode": "class SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM.with_cerebras(),\n            tts=openai.TTS(instructions=\"You are a helpful assistant with a pleasant voice. Speak in a natural, conversational tone.\"),\n            vad=silero.VAD.load()",
        "detail": "pipeline-llm.cerebras_llm",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "pipeline-llm.cerebras_llm",
        "description": "pipeline-llm.cerebras_llm",
        "peekOfCode": "logger = logging.getLogger(\"cerebras_llm\")\nlogger.setLevel(logging.INFO)\nclass SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM.with_cerebras(),",
        "detail": "pipeline-llm.cerebras_llm",
        "documentation": {}
    },
    {
        "label": "SimpleAgent",
        "kind": 6,
        "importPath": "pipeline-llm.google_llm",
        "description": "pipeline-llm.google_llm",
        "peekOfCode": "class SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=google.LLM(),\n            tts=openai.TTS(instructions=\"You are a helpful assistant with a pleasant voice. Speak in a natural, conversational tone.\"),\n            vad=silero.VAD.load()",
        "detail": "pipeline-llm.google_llm",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "pipeline-llm.google_llm",
        "description": "pipeline-llm.google_llm",
        "peekOfCode": "logger = logging.getLogger(\"google_llm\")\nlogger.setLevel(logging.INFO)\nclass SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=google.LLM(),",
        "detail": "pipeline-llm.google_llm",
        "documentation": {}
    },
    {
        "label": "count_sentences",
        "kind": 2,
        "importPath": "pipeline-llm.interrupt_user",
        "description": "pipeline-llm.interrupt_user",
        "peekOfCode": "def count_sentences(text):\n    \"\"\"Count the number of sentences in text\"\"\"\n    sentences = re.findall(r'[^.!?]+[.!?](?:\\s|$)', text)\n    return len(sentences)\nasync def entrypoint(ctx: JobContext):\n    await ctx.connect()\n    session = AgentSession()\n    agent = Agent(\n        instructions=\"You are a helpful agent that politely interrupts users when they talk too much.\",\n        stt=deepgram.STT(),",
        "detail": "pipeline-llm.interrupt_user",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "pipeline-llm.interrupt_user",
        "description": "pipeline-llm.interrupt_user",
        "peekOfCode": "logger = logging.getLogger(\"interrupt-user\")\nlogger.setLevel(logging.INFO)\ndef count_sentences(text):\n    \"\"\"Count the number of sentences in text\"\"\"\n    sentences = re.findall(r'[^.!?]+[.!?](?:\\s|$)', text)\n    return len(sentences)\nasync def entrypoint(ctx: JobContext):\n    await ctx.connect()\n    session = AgentSession()\n    agent = Agent(",
        "detail": "pipeline-llm.interrupt_user",
        "documentation": {}
    },
    {
        "label": "WarAndPeaceAgent",
        "kind": 6,
        "importPath": "pipeline-llm.large_context",
        "description": "pipeline-llm.large_context",
        "peekOfCode": "class WarAndPeaceAgent(Agent):\n    def __init__(self) -> None:\n        # Load War and Peace text content\n        book_path = Path(__file__).parent / \"lib\" / \"war_and_peace.txt\"\n        with open(book_path, \"r\", encoding=\"utf-8\") as f:\n            war_and_peace_text = f.read()\n        super().__init__(\n            instructions=f\"\"\"\n                You are a War and Peace book club assistant. You help users discuss and understand Leo Tolstoy's novel \"War and Peace.\"\n                You can answer questions about the plot, characters, themes, historical context, and literary analysis of the book.",
        "detail": "pipeline-llm.large_context",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "pipeline-llm.large_context",
        "description": "pipeline-llm.large_context",
        "peekOfCode": "logger = logging.getLogger(\"google_llm\")\nlogger.setLevel(logging.INFO)\nclass WarAndPeaceAgent(Agent):\n    def __init__(self) -> None:\n        # Load War and Peace text content\n        book_path = Path(__file__).parent / \"lib\" / \"war_and_peace.txt\"\n        with open(book_path, \"r\", encoding=\"utf-8\") as f:\n            war_and_peace_text = f.read()\n        super().__init__(\n            instructions=f\"\"\"",
        "detail": "pipeline-llm.large_context",
        "documentation": {}
    },
    {
        "label": "SimpleAgent",
        "kind": 6,
        "importPath": "pipeline-llm.llm_powered_content_filter",
        "description": "pipeline-llm.llm_powered_content_filter",
        "peekOfCode": "class SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"You are a helpful agent.\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(),\n            tts=openai.TTS(),\n            vad=silero.VAD.load()\n        )\n        self.moderator_llm = openai.LLM(model=\"gpt-4o-mini\")",
        "detail": "pipeline-llm.llm_powered_content_filter",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "pipeline-llm.llm_powered_content_filter",
        "description": "pipeline-llm.llm_powered_content_filter",
        "peekOfCode": "logger = logging.getLogger(\"complex-content-filter\")\nlogger.setLevel(logging.INFO)\nclass SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"You are a helpful agent.\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(),\n            tts=openai.TTS(),\n            vad=silero.VAD.load()",
        "detail": "pipeline-llm.llm_powered_content_filter",
        "documentation": {}
    },
    {
        "label": "SimpleAgent",
        "kind": 6,
        "importPath": "pipeline-llm.ollama_llm",
        "description": "pipeline-llm.ollama_llm",
        "peekOfCode": "class SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM.with_ollama(),\n            tts=openai.TTS(),\n            vad=silero.VAD.load()",
        "detail": "pipeline-llm.ollama_llm",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "pipeline-llm.ollama_llm",
        "description": "pipeline-llm.ollama_llm",
        "peekOfCode": "logger = logging.getLogger(\"ollama_llm\")\nlogger.setLevel(logging.INFO)\nclass SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM.with_ollama(),",
        "detail": "pipeline-llm.ollama_llm",
        "documentation": {}
    },
    {
        "label": "SimpleAgent",
        "kind": 6,
        "importPath": "pipeline-llm.openai_llm",
        "description": "pipeline-llm.openai_llm",
        "peekOfCode": "class SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(),\n            tts=openai.TTS(),\n            vad=silero.VAD.load()",
        "detail": "pipeline-llm.openai_llm",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "pipeline-llm.openai_llm",
        "description": "pipeline-llm.openai_llm",
        "peekOfCode": "logger = logging.getLogger(\"openai_llm\")\nlogger.setLevel(logging.INFO)\nclass SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(),",
        "detail": "pipeline-llm.openai_llm",
        "documentation": {}
    },
    {
        "label": "SimpleAgent",
        "kind": 6,
        "importPath": "pipeline-llm.replacing_llm_output",
        "description": "pipeline-llm.replacing_llm_output",
        "peekOfCode": "class SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM.with_groq(model=\"deepseek-r1-distill-llama-70b\"),\n            tts=openai.TTS(),\n            vad=silero.VAD.load()",
        "detail": "pipeline-llm.replacing_llm_output",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "pipeline-llm.replacing_llm_output",
        "description": "pipeline-llm.replacing_llm_output",
        "peekOfCode": "logger = logging.getLogger(\"replacing-llm-output\")\nlogger.setLevel(logging.INFO)\nclass SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM.with_groq(model=\"deepseek-r1-distill-llama-70b\"),",
        "detail": "pipeline-llm.replacing_llm_output",
        "documentation": {}
    },
    {
        "label": "SimpleAgent",
        "kind": 6,
        "importPath": "pipeline-llm.simple_content_filter",
        "description": "pipeline-llm.simple_content_filter",
        "peekOfCode": "class SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(),\n            tts=openai.TTS(),\n            vad=silero.VAD.load()",
        "detail": "pipeline-llm.simple_content_filter",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "pipeline-llm.simple_content_filter",
        "description": "pipeline-llm.simple_content_filter",
        "peekOfCode": "logger = logging.getLogger(\"simple-content-filter\")\nlogger.setLevel(logging.INFO)\nclass SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(),",
        "detail": "pipeline-llm.simple_content_filter",
        "documentation": {}
    },
    {
        "label": "SimpleAgent",
        "kind": 6,
        "importPath": "pipeline-llm.transcription_node",
        "description": "pipeline-llm.transcription_node",
        "peekOfCode": "class SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(),\n            tts=openai.TTS(),\n            vad=silero.VAD.load()",
        "detail": "pipeline-llm.transcription_node",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "pipeline-llm.transcription_node",
        "description": "pipeline-llm.transcription_node",
        "peekOfCode": "logger = logging.getLogger(\"openai_llm\")\nlogger.setLevel(logging.INFO)\nclass SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(),",
        "detail": "pipeline-llm.transcription_node",
        "documentation": {}
    },
    {
        "label": "SimpleAgent",
        "kind": 6,
        "importPath": "pipeline-stt.keyword_detection",
        "description": "pipeline-stt.keyword_detection",
        "peekOfCode": "class SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(),\n            tts=openai.TTS(),\n            vad=silero.VAD.load()",
        "detail": "pipeline-stt.keyword_detection",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "pipeline-stt.keyword_detection",
        "description": "pipeline-stt.keyword_detection",
        "peekOfCode": "logger = logging.getLogger(\"listen-and-respond\")\nlogger.setLevel(logging.INFO)\nclass SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(),",
        "detail": "pipeline-stt.keyword_detection",
        "documentation": {}
    },
    {
        "label": "CartesiaAgent",
        "kind": 6,
        "importPath": "pipeline-tts.cartesia_tts",
        "description": "pipeline-tts.cartesia_tts",
        "peekOfCode": "class CartesiaAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful assistant communicating through voice. You're helping me test ... yourself ... since you're the AI agent. \n                Don't use any unpronouncable characters.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),\n            tts=cartesia.TTS(",
        "detail": "pipeline-tts.cartesia_tts",
        "documentation": {}
    },
    {
        "label": "LanguageSwitcherAgent",
        "kind": 6,
        "importPath": "pipeline-tts.elevenlabs_change_language",
        "description": "pipeline-tts.elevenlabs_change_language",
        "peekOfCode": "class LanguageSwitcherAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful assistant communicating through voice. \n                You can switch to a different language if asked.\n                Don't use any unpronouncable characters.\n            \"\"\",\n            stt=deepgram.STT(\n                model=\"nova-2-general\",",
        "detail": "pipeline-tts.elevenlabs_change_language",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "pipeline-tts.elevenlabs_change_language",
        "description": "pipeline-tts.elevenlabs_change_language",
        "peekOfCode": "logger = logging.getLogger(\"language-switcher\")\nlogger.setLevel(logging.INFO)\nload_dotenv(dotenv_path=Path(__file__).parent.parent / '.env')\nclass LanguageSwitcherAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful assistant communicating through voice. \n                You can switch to a different language if asked.\n                Don't use any unpronouncable characters.",
        "detail": "pipeline-tts.elevenlabs_change_language",
        "documentation": {}
    },
    {
        "label": "ElevenLabsAgent",
        "kind": 6,
        "importPath": "pipeline-tts.elevenlabs_tts",
        "description": "pipeline-tts.elevenlabs_tts",
        "peekOfCode": "class ElevenLabsAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful assistant communicating through voice. You're helping me test ... yourself ... since you're the AI agent. \n                Don't use any unpronouncable characters.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),\n            tts=elevenlabs.TTS(",
        "detail": "pipeline-tts.elevenlabs_tts",
        "documentation": {}
    },
    {
        "label": "GreeterAgent",
        "kind": 6,
        "importPath": "pipeline-tts.only_greet",
        "description": "pipeline-tts.only_greet",
        "peekOfCode": "class GreeterAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"You are a simple greeter that welcomes users when they join.\",\n            tts=openai.TTS()\n        )\n    async def on_enter(self):\n        self.session.say(\"Hi there! Is there anything I can help you with?\")\nasync def entrypoint(ctx: JobContext):\n    await ctx.connect()",
        "detail": "pipeline-tts.only_greet",
        "documentation": {}
    },
    {
        "label": "SimpleAgent",
        "kind": 6,
        "importPath": "pipeline-tts.openai_tts",
        "description": "pipeline-tts.openai_tts",
        "peekOfCode": "class SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful assistant communicating through voice. You're helping me test ... yourself ... since you're the AI agent. \n                Don't use any unpronouncable characters.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),\n            tts=openai.TTS(),",
        "detail": "pipeline-tts.openai_tts",
        "documentation": {}
    },
    {
        "label": "PlayAIAgent",
        "kind": 6,
        "importPath": "pipeline-tts.playai_tts",
        "description": "pipeline-tts.playai_tts",
        "peekOfCode": "class PlayAIAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful assistant communicating through voice. You're helping me test ... yourself ... since you're the AI agent. \n                Don't use any unpronouncable characters.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),\n            tts=playai.TTS(",
        "detail": "pipeline-tts.playai_tts",
        "documentation": {}
    },
    {
        "label": "RimeAgent",
        "kind": 6,
        "importPath": "pipeline-tts.rime_tts",
        "description": "pipeline-tts.rime_tts",
        "peekOfCode": "class RimeAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful assistant communicating through voice. You're helping me test ... yourself ... since you're the AI agent. \n                Don't use any unpronouncable characters.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),\n            tts=rime.TTS(",
        "detail": "pipeline-tts.rime_tts",
        "documentation": {}
    },
    {
        "label": "ShortRepliesOnlyAgent",
        "kind": 6,
        "importPath": "pipeline-tts.short_replies_only",
        "description": "pipeline-tts.short_replies_only",
        "peekOfCode": "class ShortRepliesOnlyAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful assistant communicating through voice.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),\n            tts=rime.TTS(model=\"arcana\"),\n            vad=silero.VAD.load()",
        "detail": "pipeline-tts.short_replies_only",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "pipeline-tts.short_replies_only",
        "description": "pipeline-tts.short_replies_only",
        "peekOfCode": "logger = logging.getLogger(\"tts_node\")\nlogger.setLevel(logging.INFO)\nclass ShortRepliesOnlyAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful assistant communicating through voice.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),",
        "detail": "pipeline-tts.short_replies_only",
        "documentation": {}
    },
    {
        "label": "RimeAgent",
        "kind": 6,
        "importPath": "pipeline-tts.tts_comparison",
        "description": "pipeline-tts.tts_comparison",
        "peekOfCode": "class RimeAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful assistant communicating through voice.\n                You are currently using the Rime TTS provider.\n                You can switch to a different TTS provider if asked.\n                Don't use any unpronouncable characters.\n            \"\"\",\n            stt=deepgram.STT(),",
        "detail": "pipeline-tts.tts_comparison",
        "documentation": {}
    },
    {
        "label": "ElevenLabsAgent",
        "kind": 6,
        "importPath": "pipeline-tts.tts_comparison",
        "description": "pipeline-tts.tts_comparison",
        "peekOfCode": "class ElevenLabsAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful assistant communicating through voice.\n                You are currently using the ElevenLabs TTS provider.\n                You can switch to a different TTS provider if asked.\n                Don't use any unpronouncable characters.\n            \"\"\",\n            stt=deepgram.STT(),",
        "detail": "pipeline-tts.tts_comparison",
        "documentation": {}
    },
    {
        "label": "CartesiaAgent",
        "kind": 6,
        "importPath": "pipeline-tts.tts_comparison",
        "description": "pipeline-tts.tts_comparison",
        "peekOfCode": "class CartesiaAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful assistant communicating through voice.\n                You are currently using the Cartesia TTS provider.\n                You can switch to a different TTS provider if asked.\n                Don't use any unpronouncable characters.\n            \"\"\",\n            stt=deepgram.STT(),",
        "detail": "pipeline-tts.tts_comparison",
        "documentation": {}
    },
    {
        "label": "PlayAIAgent",
        "kind": 6,
        "importPath": "pipeline-tts.tts_comparison",
        "description": "pipeline-tts.tts_comparison",
        "peekOfCode": "class PlayAIAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful assistant communicating through voice.\n                You are currently using the PlayAI TTS provider.\n                You can switch to a different TTS provider if asked.\n                Don't use any unpronouncable characters.\n            \"\"\",\n            stt=deepgram.STT(),",
        "detail": "pipeline-tts.tts_comparison",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "pipeline-tts.tts_comparison",
        "description": "pipeline-tts.tts_comparison",
        "peekOfCode": "logger = logging.getLogger(\"tts-comparison\")\nlogger.setLevel(logging.INFO)\nload_dotenv(dotenv_path=Path(__file__).parent.parent / '.env')\n### We're not including the OpenAI TTS provider here, since it uses a different sample rate.\n### See openai_tts.py for an example of how to use it.\nclass RimeAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful assistant communicating through voice.",
        "detail": "pipeline-tts.tts_comparison",
        "documentation": {}
    },
    {
        "label": "TtsNodeOverrideAgent",
        "kind": 6,
        "importPath": "pipeline-tts.tts_node",
        "description": "pipeline-tts.tts_node",
        "peekOfCode": "class TtsNodeOverrideAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful assistant communicating through voice.\n                Feel free to use \"lol\" in your responses when something is funny.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),\n            tts=rime.TTS(model=\"arcana\"),",
        "detail": "pipeline-tts.tts_node",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "pipeline-tts.tts_node",
        "description": "pipeline-tts.tts_node",
        "peekOfCode": "logger = logging.getLogger(\"tts_node\")\nlogger.setLevel(logging.INFO)\nclass TtsNodeOverrideAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful assistant communicating through voice.\n                Feel free to use \"lol\" in your responses when something is funny.\n            \"\"\",\n            stt=deepgram.STT(),",
        "detail": "pipeline-tts.tts_node",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "rag.build_rag_data",
        "description": "rag.build_rag_data",
        "peekOfCode": "logger = logging.getLogger(\"build-rag-data\")\n# Load environment variables\nload_dotenv()\nasync def main() -> None:\n    \"\"\"\n    Build the RAG database from the scraped docs content.\n    Usage:\n        1. Run scrape_docs.py to scrape the docs content\n        2. Run this script to build the RAG database\n        3. The database will be created in the 'data' directory",
        "detail": "rag.build_rag_data",
        "documentation": {}
    },
    {
        "label": "_FileData",
        "kind": 6,
        "importPath": "rag.main",
        "description": "rag.main",
        "peekOfCode": "class _FileData:\n    f: int\n    metric: Metric\n    userdata: dict[int, Any]\n@dataclass\nclass Item:\n    i: int\n    userdata: Any\n    vector: list[float]\n@dataclass",
        "detail": "rag.main",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "rag.main",
        "description": "rag.main",
        "peekOfCode": "class Item:\n    i: int\n    userdata: Any\n    vector: list[float]\n@dataclass\nclass QueryResult:\n    userdata: Any\n    distance: float\nclass AnnoyIndex:\n    def __init__(self, index: annoy.AnnoyIndex, filedata: _FileData) -> None:",
        "detail": "rag.main",
        "documentation": {}
    },
    {
        "label": "QueryResult",
        "kind": 6,
        "importPath": "rag.main",
        "description": "rag.main",
        "peekOfCode": "class QueryResult:\n    userdata: Any\n    distance: float\nclass AnnoyIndex:\n    def __init__(self, index: annoy.AnnoyIndex, filedata: _FileData) -> None:\n        self._index = index\n        self._filedata = filedata\n    @classmethod\n    def load(cls, path: str) -> \"AnnoyIndex\":\n        p = Path(path)",
        "detail": "rag.main",
        "documentation": {}
    },
    {
        "label": "AnnoyIndex",
        "kind": 6,
        "importPath": "rag.main",
        "description": "rag.main",
        "peekOfCode": "class AnnoyIndex:\n    def __init__(self, index: annoy.AnnoyIndex, filedata: _FileData) -> None:\n        self._index = index\n        self._filedata = filedata\n    @classmethod\n    def load(cls, path: str) -> \"AnnoyIndex\":\n        p = Path(path)\n        index_path = p / ANNOY_FILE\n        metadata_path = p / METADATA_FILE\n        with open(metadata_path, \"rb\") as f:",
        "detail": "rag.main",
        "documentation": {}
    },
    {
        "label": "RAGEnrichedAgent",
        "kind": 6,
        "importPath": "rag.main",
        "description": "rag.main",
        "peekOfCode": "class RAGEnrichedAgent(Agent):\n    \"\"\"\n    An agent that can answer questions using RAG (Retrieval Augmented Generation).\n    \"\"\"\n    def __init__(self) -> None:\n        \"\"\"Initialize the RAG-enabled agent.\"\"\"\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful voice assistant specializing in knowledge about LiveKit (\"live\" pronounced as in \"live stream\").\n                You can answer questions about LiveKit, the LiveKit Agents SDK, and more. ",
        "detail": "rag.main",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "rag.main",
        "description": "rag.main",
        "peekOfCode": "logger = logging.getLogger(\"rag-agent\")\n# RAG Index Types and Classes\nMetric = Literal[\"angular\", \"euclidean\", \"manhattan\", \"hamming\", \"dot\"]\nANNOY_FILE = \"index.annoy\"\nMETADATA_FILE = \"metadata.pkl\"\n@dataclass\nclass _FileData:\n    f: int\n    metric: Metric\n    userdata: dict[int, Any]",
        "detail": "rag.main",
        "documentation": {}
    },
    {
        "label": "Metric",
        "kind": 5,
        "importPath": "rag.main",
        "description": "rag.main",
        "peekOfCode": "Metric = Literal[\"angular\", \"euclidean\", \"manhattan\", \"hamming\", \"dot\"]\nANNOY_FILE = \"index.annoy\"\nMETADATA_FILE = \"metadata.pkl\"\n@dataclass\nclass _FileData:\n    f: int\n    metric: Metric\n    userdata: dict[int, Any]\n@dataclass\nclass Item:",
        "detail": "rag.main",
        "documentation": {}
    },
    {
        "label": "ANNOY_FILE",
        "kind": 5,
        "importPath": "rag.main",
        "description": "rag.main",
        "peekOfCode": "ANNOY_FILE = \"index.annoy\"\nMETADATA_FILE = \"metadata.pkl\"\n@dataclass\nclass _FileData:\n    f: int\n    metric: Metric\n    userdata: dict[int, Any]\n@dataclass\nclass Item:\n    i: int",
        "detail": "rag.main",
        "documentation": {}
    },
    {
        "label": "METADATA_FILE",
        "kind": 5,
        "importPath": "rag.main",
        "description": "rag.main",
        "peekOfCode": "METADATA_FILE = \"metadata.pkl\"\n@dataclass\nclass _FileData:\n    f: int\n    metric: Metric\n    userdata: dict[int, Any]\n@dataclass\nclass Item:\n    i: int\n    userdata: Any",
        "detail": "rag.main",
        "documentation": {}
    },
    {
        "label": "_FileData",
        "kind": 6,
        "importPath": "rag.rag_db_builder",
        "description": "rag.rag_db_builder",
        "peekOfCode": "class _FileData:\n    f: int\n    metric: Metric\n    userdata: dict[int, Any]\n@dataclass\nclass Item:\n    i: int\n    userdata: Any\n    vector: list[float]\n@dataclass",
        "detail": "rag.rag_db_builder",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "rag.rag_db_builder",
        "description": "rag.rag_db_builder",
        "peekOfCode": "class Item:\n    i: int\n    userdata: Any\n    vector: list[float]\n@dataclass\nclass QueryResult:\n    userdata: Any\n    distance: float\nclass AnnoyIndex:\n    def __init__(self, index: annoy.AnnoyIndex, filedata: _FileData) -> None:",
        "detail": "rag.rag_db_builder",
        "documentation": {}
    },
    {
        "label": "QueryResult",
        "kind": 6,
        "importPath": "rag.rag_db_builder",
        "description": "rag.rag_db_builder",
        "peekOfCode": "class QueryResult:\n    userdata: Any\n    distance: float\nclass AnnoyIndex:\n    def __init__(self, index: annoy.AnnoyIndex, filedata: _FileData) -> None:\n        self._index = index\n        self._filedata = filedata\n    @classmethod\n    def load(cls, path: str) -> \"AnnoyIndex\":\n        p = Path(path)",
        "detail": "rag.rag_db_builder",
        "documentation": {}
    },
    {
        "label": "AnnoyIndex",
        "kind": 6,
        "importPath": "rag.rag_db_builder",
        "description": "rag.rag_db_builder",
        "peekOfCode": "class AnnoyIndex:\n    def __init__(self, index: annoy.AnnoyIndex, filedata: _FileData) -> None:\n        self._index = index\n        self._filedata = filedata\n    @classmethod\n    def load(cls, path: str) -> \"AnnoyIndex\":\n        p = Path(path)\n        index_path = p / ANNOY_FILE\n        metadata_path = p / METADATA_FILE\n        with open(metadata_path, \"rb\") as f:",
        "detail": "rag.rag_db_builder",
        "documentation": {}
    },
    {
        "label": "IndexBuilder",
        "kind": 6,
        "importPath": "rag.rag_db_builder",
        "description": "rag.rag_db_builder",
        "peekOfCode": "class IndexBuilder:\n    def __init__(self, f: int, metric: Metric) -> None:\n        self._index = annoy.AnnoyIndex(f, metric)\n        self._filedata = _FileData(f=f, metric=metric, userdata={})\n        self._i = 0\n    def save(self, path: str) -> None:\n        p = Path(path)\n        p.mkdir(parents=True, exist_ok=True)\n        index_path = p / ANNOY_FILE\n        metadata_path = p / METADATA_FILE",
        "detail": "rag.rag_db_builder",
        "documentation": {}
    },
    {
        "label": "SentenceChunker",
        "kind": 6,
        "importPath": "rag.rag_db_builder",
        "description": "rag.rag_db_builder",
        "peekOfCode": "class SentenceChunker:\n    def __init__(\n        self,\n        *,\n        max_chunk_size: int = 120,\n        chunk_overlap: int = 30,\n        paragraph_tokenizer: Callable[\n            [str], list[str]\n        ] = tokenize.basic.tokenize_paragraphs,\n        sentence_tokenizer: tokenize.SentenceTokenizer = tokenize.basic.SentenceTokenizer(),  # noqa: B008",
        "detail": "rag.rag_db_builder",
        "documentation": {}
    },
    {
        "label": "RAGBuilder",
        "kind": 6,
        "importPath": "rag.rag_db_builder",
        "description": "rag.rag_db_builder",
        "peekOfCode": "class RAGBuilder:\n    \"\"\"\n    Builder for creating and managing RAG (Retrieval-Augmented Generation) databases.\n    Handles data preparation, embedding generation, and vector database creation.\n    Example usage:\n        builder = RAGBuilder(\n            index_path=\"data\",\n            data_path=\"my_data.pkl\",\n            embeddings_dimension=1536\n        )",
        "detail": "rag.rag_db_builder",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "rag.rag_db_builder",
        "description": "rag.rag_db_builder",
        "peekOfCode": "logger = logging.getLogger(\"rag-builder\")\n# RAG Index Types and Classes\nMetric = Literal[\"angular\", \"euclidean\", \"manhattan\", \"hamming\", \"dot\"]\nANNOY_FILE = \"index.annoy\"\nMETADATA_FILE = \"metadata.pkl\"\n@dataclass\nclass _FileData:\n    f: int\n    metric: Metric\n    userdata: dict[int, Any]",
        "detail": "rag.rag_db_builder",
        "documentation": {}
    },
    {
        "label": "Metric",
        "kind": 5,
        "importPath": "rag.rag_db_builder",
        "description": "rag.rag_db_builder",
        "peekOfCode": "Metric = Literal[\"angular\", \"euclidean\", \"manhattan\", \"hamming\", \"dot\"]\nANNOY_FILE = \"index.annoy\"\nMETADATA_FILE = \"metadata.pkl\"\n@dataclass\nclass _FileData:\n    f: int\n    metric: Metric\n    userdata: dict[int, Any]\n@dataclass\nclass Item:",
        "detail": "rag.rag_db_builder",
        "documentation": {}
    },
    {
        "label": "ANNOY_FILE",
        "kind": 5,
        "importPath": "rag.rag_db_builder",
        "description": "rag.rag_db_builder",
        "peekOfCode": "ANNOY_FILE = \"index.annoy\"\nMETADATA_FILE = \"metadata.pkl\"\n@dataclass\nclass _FileData:\n    f: int\n    metric: Metric\n    userdata: dict[int, Any]\n@dataclass\nclass Item:\n    i: int",
        "detail": "rag.rag_db_builder",
        "documentation": {}
    },
    {
        "label": "METADATA_FILE",
        "kind": 5,
        "importPath": "rag.rag_db_builder",
        "description": "rag.rag_db_builder",
        "peekOfCode": "METADATA_FILE = \"metadata.pkl\"\n@dataclass\nclass _FileData:\n    f: int\n    metric: Metric\n    userdata: dict[int, Any]\n@dataclass\nclass Item:\n    i: int\n    userdata: Any",
        "detail": "rag.rag_db_builder",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "rag.rag_handler",
        "description": "rag.rag_handler",
        "peekOfCode": "class Item:\n    i: int\n    userdata: Any\n    vector: list[float]\n@dataclass\nclass _FileData:\n    f: int\n    metric: Metric\n    userdata: dict[int, Any]\n@dataclass",
        "detail": "rag.rag_handler",
        "documentation": {}
    },
    {
        "label": "_FileData",
        "kind": 6,
        "importPath": "rag.rag_handler",
        "description": "rag.rag_handler",
        "peekOfCode": "class _FileData:\n    f: int\n    metric: Metric\n    userdata: dict[int, Any]\n@dataclass\nclass QueryResult:\n    userdata: Any\n    distance: float\nclass AnnoyIndex:\n    def __init__(self, index: annoy.AnnoyIndex, filedata: _FileData) -> None:",
        "detail": "rag.rag_handler",
        "documentation": {}
    },
    {
        "label": "QueryResult",
        "kind": 6,
        "importPath": "rag.rag_handler",
        "description": "rag.rag_handler",
        "peekOfCode": "class QueryResult:\n    userdata: Any\n    distance: float\nclass AnnoyIndex:\n    def __init__(self, index: annoy.AnnoyIndex, filedata: _FileData) -> None:\n        self._index = index\n        self._filedata = filedata\n    @classmethod\n    def load(cls, path: str) -> \"AnnoyIndex\":\n        p = Path(path)",
        "detail": "rag.rag_handler",
        "documentation": {}
    },
    {
        "label": "AnnoyIndex",
        "kind": 6,
        "importPath": "rag.rag_handler",
        "description": "rag.rag_handler",
        "peekOfCode": "class AnnoyIndex:\n    def __init__(self, index: annoy.AnnoyIndex, filedata: _FileData) -> None:\n        self._index = index\n        self._filedata = filedata\n    @classmethod\n    def load(cls, path: str) -> \"AnnoyIndex\":\n        p = Path(path)\n        index_path = p / ANNOY_FILE\n        metadata_path = p / METADATA_FILE\n        with open(metadata_path, \"rb\") as f:",
        "detail": "rag.rag_handler",
        "documentation": {}
    },
    {
        "label": "ThinkingStyle",
        "kind": 6,
        "importPath": "rag.rag_handler",
        "description": "rag.rag_handler",
        "peekOfCode": "class ThinkingStyle(Enum):\n    NONE = \"none\"\n    MESSAGE = \"message\"\n    LLM = \"llm\"\nDEFAULT_THINKING_MESSAGES = [\n    \"Let me look that up...\",\n    \"One moment while I check...\",\n    \"I'll find that information for you...\",\n    \"Just a second while I search...\",\n    \"Looking into that now...\"",
        "detail": "rag.rag_handler",
        "documentation": {}
    },
    {
        "label": "RAGHandler",
        "kind": 6,
        "importPath": "rag.rag_handler",
        "description": "rag.rag_handler",
        "peekOfCode": "class RAGHandler:\n    \"\"\"\n    Handler for Retrieval-Augmented Generation (RAG) in LiveKit agents 1.0.\n    Provides flexible ways to handle delays during RAG lookups.\n    Example usage:\n        # In your agent class\n        def __init__(self) -> None:\n            super().__init__(...)\n            # Initialize RAG handler\n            self.rag_handler = RAGHandler(",
        "detail": "rag.rag_handler",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "rag.rag_handler",
        "description": "rag.rag_handler",
        "peekOfCode": "logger = logging.getLogger(\"rag-handler\")\n# RAG Index Types and Classes\nMetric = Literal[\"angular\", \"euclidean\", \"manhattan\", \"hamming\", \"dot\"]\nANNOY_FILE = \"index.annoy\"\nMETADATA_FILE = \"metadata.pkl\"\n@dataclass\nclass Item:\n    i: int\n    userdata: Any\n    vector: list[float]",
        "detail": "rag.rag_handler",
        "documentation": {}
    },
    {
        "label": "Metric",
        "kind": 5,
        "importPath": "rag.rag_handler",
        "description": "rag.rag_handler",
        "peekOfCode": "Metric = Literal[\"angular\", \"euclidean\", \"manhattan\", \"hamming\", \"dot\"]\nANNOY_FILE = \"index.annoy\"\nMETADATA_FILE = \"metadata.pkl\"\n@dataclass\nclass Item:\n    i: int\n    userdata: Any\n    vector: list[float]\n@dataclass\nclass _FileData:",
        "detail": "rag.rag_handler",
        "documentation": {}
    },
    {
        "label": "ANNOY_FILE",
        "kind": 5,
        "importPath": "rag.rag_handler",
        "description": "rag.rag_handler",
        "peekOfCode": "ANNOY_FILE = \"index.annoy\"\nMETADATA_FILE = \"metadata.pkl\"\n@dataclass\nclass Item:\n    i: int\n    userdata: Any\n    vector: list[float]\n@dataclass\nclass _FileData:\n    f: int",
        "detail": "rag.rag_handler",
        "documentation": {}
    },
    {
        "label": "METADATA_FILE",
        "kind": 5,
        "importPath": "rag.rag_handler",
        "description": "rag.rag_handler",
        "peekOfCode": "METADATA_FILE = \"metadata.pkl\"\n@dataclass\nclass Item:\n    i: int\n    userdata: Any\n    vector: list[float]\n@dataclass\nclass _FileData:\n    f: int\n    metric: Metric",
        "detail": "rag.rag_handler",
        "documentation": {}
    },
    {
        "label": "DEFAULT_THINKING_MESSAGES",
        "kind": 5,
        "importPath": "rag.rag_handler",
        "description": "rag.rag_handler",
        "peekOfCode": "DEFAULT_THINKING_MESSAGES = [\n    \"Let me look that up...\",\n    \"One moment while I check...\",\n    \"I'll find that information for you...\",\n    \"Just a second while I search...\",\n    \"Looking into that now...\"\n]\nDEFAULT_THINKING_PROMPT = \"Generate a very short message to indicate that we're looking up the answer in the docs\"\nclass RAGHandler:\n    \"\"\"",
        "detail": "rag.rag_handler",
        "documentation": {}
    },
    {
        "label": "DEFAULT_THINKING_PROMPT",
        "kind": 5,
        "importPath": "rag.rag_handler",
        "description": "rag.rag_handler",
        "peekOfCode": "DEFAULT_THINKING_PROMPT = \"Generate a very short message to indicate that we're looking up the answer in the docs\"\nclass RAGHandler:\n    \"\"\"\n    Handler for Retrieval-Augmented Generation (RAG) in LiveKit agents 1.0.\n    Provides flexible ways to handle delays during RAG lookups.\n    Example usage:\n        # In your agent class\n        def __init__(self) -> None:\n            super().__init__(...)\n            # Initialize RAG handler",
        "detail": "rag.rag_handler",
        "documentation": {}
    },
    {
        "label": "DocsScraper",
        "kind": 6,
        "importPath": "rag.scrape_docs",
        "description": "rag.scrape_docs",
        "peekOfCode": "class DocsScraper:\n    def __init__(self):\n        self.visited_urls: Set[str] = set()\n        self.content: List[str] = []\n        self.session = None\n    async def init_session(self):\n        \"\"\"Initialize the aiohttp session.\"\"\"\n        self.session = aiohttp.ClientSession()\n    async def close_session(self):\n        \"\"\"Close the aiohttp session.\"\"\"",
        "detail": "rag.scrape_docs",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "rag.scrape_docs",
        "description": "rag.scrape_docs",
        "peekOfCode": "logger = logging.getLogger(\"docs-scraper\")\n# Load environment variables\nload_dotenv()\nBASE_URL = \"https://docs.livekit.io\"\nSITEMAP_URL = f\"{BASE_URL}/sitemap.xml\"\nOUTPUT_FILE = Path(__file__).parent / \"data/raw_data.txt\"\nEXCLUDED_PATHS = [\"/reference\"]  # Paths to exclude from scraping\nclass DocsScraper:\n    def __init__(self):\n        self.visited_urls: Set[str] = set()",
        "detail": "rag.scrape_docs",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "rag.scrape_docs",
        "description": "rag.scrape_docs",
        "peekOfCode": "BASE_URL = \"https://docs.livekit.io\"\nSITEMAP_URL = f\"{BASE_URL}/sitemap.xml\"\nOUTPUT_FILE = Path(__file__).parent / \"data/raw_data.txt\"\nEXCLUDED_PATHS = [\"/reference\"]  # Paths to exclude from scraping\nclass DocsScraper:\n    def __init__(self):\n        self.visited_urls: Set[str] = set()\n        self.content: List[str] = []\n        self.session = None\n    async def init_session(self):",
        "detail": "rag.scrape_docs",
        "documentation": {}
    },
    {
        "label": "SITEMAP_URL",
        "kind": 5,
        "importPath": "rag.scrape_docs",
        "description": "rag.scrape_docs",
        "peekOfCode": "SITEMAP_URL = f\"{BASE_URL}/sitemap.xml\"\nOUTPUT_FILE = Path(__file__).parent / \"data/raw_data.txt\"\nEXCLUDED_PATHS = [\"/reference\"]  # Paths to exclude from scraping\nclass DocsScraper:\n    def __init__(self):\n        self.visited_urls: Set[str] = set()\n        self.content: List[str] = []\n        self.session = None\n    async def init_session(self):\n        \"\"\"Initialize the aiohttp session.\"\"\"",
        "detail": "rag.scrape_docs",
        "documentation": {}
    },
    {
        "label": "OUTPUT_FILE",
        "kind": 5,
        "importPath": "rag.scrape_docs",
        "description": "rag.scrape_docs",
        "peekOfCode": "OUTPUT_FILE = Path(__file__).parent / \"data/raw_data.txt\"\nEXCLUDED_PATHS = [\"/reference\"]  # Paths to exclude from scraping\nclass DocsScraper:\n    def __init__(self):\n        self.visited_urls: Set[str] = set()\n        self.content: List[str] = []\n        self.session = None\n    async def init_session(self):\n        \"\"\"Initialize the aiohttp session.\"\"\"\n        self.session = aiohttp.ClientSession()",
        "detail": "rag.scrape_docs",
        "documentation": {}
    },
    {
        "label": "EXCLUDED_PATHS",
        "kind": 5,
        "importPath": "rag.scrape_docs",
        "description": "rag.scrape_docs",
        "peekOfCode": "EXCLUDED_PATHS = [\"/reference\"]  # Paths to exclude from scraping\nclass DocsScraper:\n    def __init__(self):\n        self.visited_urls: Set[str] = set()\n        self.content: List[str] = []\n        self.session = None\n    async def init_session(self):\n        \"\"\"Initialize the aiohttp session.\"\"\"\n        self.session = aiohttp.ClientSession()\n    async def close_session(self):",
        "detail": "rag.scrape_docs",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "kind": 6,
        "importPath": "realtime.openai-realtime",
        "description": "realtime.openai-realtime",
        "peekOfCode": "class Assistant(Agent):\n    def __init__(self, *, pitch_shift_semitones: float = -4.0) -> None:\n        super().__init__(instructions=\"You are a helpful voice AI assistant.\")\n        self.pitch_shift_semitones = pitch_shift_semitones\n    async def realtime_audio_output_node(\n        self, audio: AsyncIterable[rtc.AudioFrame], model_settings: ModelSettings\n    ) -> AsyncIterable[rtc.AudioFrame]:\n        return self._process_audio_stream(\n            Agent.default.realtime_audio_output_node(self, audio, model_settings)\n        )",
        "detail": "realtime.openai-realtime",
        "documentation": {}
    },
    {
        "label": "UserSessionData",
        "kind": 6,
        "importPath": "rpc.rpc_agent",
        "description": "rpc.rpc_agent",
        "peekOfCode": "class UserSessionData:\n    \"\"\"Store user session data with CRUD operations.\"\"\"\n    # Dictionary to store data objects by their ID\n    data_objects: Dict[str, Dict[str, Any]] = field(default_factory=dict)\n    def create_object(self, object_type: str, object_data: Dict[str, Any]) -> str:\n        \"\"\"Create a new data object with auto-generated ID.\"\"\"\n        object_id = str(uuid.uuid4())\n        # Create a container with metadata and the actual data\n        data_container = {\n            \"id\": object_id,",
        "detail": "rpc.rpc_agent",
        "documentation": {}
    },
    {
        "label": "RPCStateAgent",
        "kind": 6,
        "importPath": "rpc.rpc_agent",
        "description": "rpc.rpc_agent",
        "peekOfCode": "class RPCStateAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are an agent that manages state through RPC calls\n                and also through function calls.\n                You can create, read, update, and delete data objects.\n                Available functions:\n                - create_note: Create a new note\n                - update_note: Update an existing note",
        "detail": "rpc.rpc_agent",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "rpc.rpc_agent",
        "description": "rpc.rpc_agent",
        "peekOfCode": "logger = logging.getLogger(\"rpc-state-agent\")\nlogger.setLevel(logging.INFO)\n# ====== RPC STATE MANAGEMENT PATTERNS ======\n\"\"\"\nWhen implementing RPC state management, it's important to understand\nthe following key patterns:\n1. RPC PAYLOAD STRUCTURE:\n   - Payloads come wrapped in an RpcInvocationData object\n   - You must extract the payload using rpc_data.payload\n   - Payloads may be strings (requiring JSON parsing) or already parsed objects",
        "detail": "rpc.rpc_agent",
        "documentation": {}
    },
    {
        "label": "SimpleAgent",
        "kind": 6,
        "importPath": "telephony.make_call.calling_agent",
        "description": "telephony.make_call.calling_agent",
        "peekOfCode": "class SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are calling someone on the phone. Your goal is to know if they prefer \n                chocolate or vanilla ice cream. That's the only question you should ask, and \n                you should get right to the point. Say something like \"Hello, I'm calling to \n                ask you a question about ice cream. Do you prefer chocolate or vanilla?\"\n            \"\"\",\n            stt=deepgram.STT(),",
        "detail": "telephony.make_call.calling_agent",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "telephony.make_call.calling_agent",
        "description": "telephony.make_call.calling_agent",
        "peekOfCode": "logger = logging.getLogger(\"calling-agent\")\nlogger.setLevel(logging.INFO)\nclass SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are calling someone on the phone. Your goal is to know if they prefer \n                chocolate or vanilla ice cream. That's the only question you should ask, and \n                you should get right to the point. Say something like \"Hello, I'm calling to \n                ask you a question about ice cream. Do you prefer chocolate or vanilla?\"",
        "detail": "telephony.make_call.calling_agent",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "telephony.make_call.make_call",
        "description": "telephony.make_call.make_call",
        "peekOfCode": "logger = logging.getLogger(\"make-call\")\nlogger.setLevel(logging.INFO)\n# Configuration\nroom_name = \"my-room\"\nagent_name = \"test-agent\"\noutbound_trunk_id = os.getenv(\"SIP_OUTBOUND_TRUNK_ID\")\nasync def make_call(phone_number):\n    \"\"\"Create a dispatch and add a SIP participant to call the phone number\"\"\"\n    lkapi = api.LiveKitAPI()\n    # Create agent dispatch",
        "detail": "telephony.make_call.make_call",
        "documentation": {}
    },
    {
        "label": "room_name",
        "kind": 5,
        "importPath": "telephony.make_call.make_call",
        "description": "telephony.make_call.make_call",
        "peekOfCode": "room_name = \"my-room\"\nagent_name = \"test-agent\"\noutbound_trunk_id = os.getenv(\"SIP_OUTBOUND_TRUNK_ID\")\nasync def make_call(phone_number):\n    \"\"\"Create a dispatch and add a SIP participant to call the phone number\"\"\"\n    lkapi = api.LiveKitAPI()\n    # Create agent dispatch\n    logger.info(f\"Creating dispatch for agent {agent_name} in room {room_name}\")\n    dispatch = await lkapi.agent_dispatch.create_dispatch(\n        api.CreateAgentDispatchRequest(",
        "detail": "telephony.make_call.make_call",
        "documentation": {}
    },
    {
        "label": "agent_name",
        "kind": 5,
        "importPath": "telephony.make_call.make_call",
        "description": "telephony.make_call.make_call",
        "peekOfCode": "agent_name = \"test-agent\"\noutbound_trunk_id = os.getenv(\"SIP_OUTBOUND_TRUNK_ID\")\nasync def make_call(phone_number):\n    \"\"\"Create a dispatch and add a SIP participant to call the phone number\"\"\"\n    lkapi = api.LiveKitAPI()\n    # Create agent dispatch\n    logger.info(f\"Creating dispatch for agent {agent_name} in room {room_name}\")\n    dispatch = await lkapi.agent_dispatch.create_dispatch(\n        api.CreateAgentDispatchRequest(\n            agent_name=agent_name, room=room_name, metadata=phone_number",
        "detail": "telephony.make_call.make_call",
        "documentation": {}
    },
    {
        "label": "outbound_trunk_id",
        "kind": 5,
        "importPath": "telephony.make_call.make_call",
        "description": "telephony.make_call.make_call",
        "peekOfCode": "outbound_trunk_id = os.getenv(\"SIP_OUTBOUND_TRUNK_ID\")\nasync def make_call(phone_number):\n    \"\"\"Create a dispatch and add a SIP participant to call the phone number\"\"\"\n    lkapi = api.LiveKitAPI()\n    # Create agent dispatch\n    logger.info(f\"Creating dispatch for agent {agent_name} in room {room_name}\")\n    dispatch = await lkapi.agent_dispatch.create_dispatch(\n        api.CreateAgentDispatchRequest(\n            agent_name=agent_name, room=room_name, metadata=phone_number\n        )",
        "detail": "telephony.make_call.make_call",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "telephony.survey_caller.make_survey_calls",
        "description": "telephony.survey_caller.make_survey_calls",
        "peekOfCode": "logger = logging.getLogger(\"make-survey-calls\")\nlogger.setLevel(logging.INFO)\n# Configuration\nroom_name_prefix = \"survey-call-\"\nagent_name = \"survey-agent\"\noutbound_trunk_id = os.getenv(\"SIP_OUTBOUND_TRUNK_ID\")\ncsv_file_path = Path(__file__).parent / \"survey_data.csv\"\nasync def make_survey_call(phone_number, question, row_index):\n    \"\"\"Create a dispatch and add a SIP participant to call the phone number with survey question\"\"\"\n    # Create a unique room name for each call using the prefix and row index",
        "detail": "telephony.survey_caller.make_survey_calls",
        "documentation": {}
    },
    {
        "label": "room_name_prefix",
        "kind": 5,
        "importPath": "telephony.survey_caller.make_survey_calls",
        "description": "telephony.survey_caller.make_survey_calls",
        "peekOfCode": "room_name_prefix = \"survey-call-\"\nagent_name = \"survey-agent\"\noutbound_trunk_id = os.getenv(\"SIP_OUTBOUND_TRUNK_ID\")\ncsv_file_path = Path(__file__).parent / \"survey_data.csv\"\nasync def make_survey_call(phone_number, question, row_index):\n    \"\"\"Create a dispatch and add a SIP participant to call the phone number with survey question\"\"\"\n    # Create a unique room name for each call using the prefix and row index\n    room_name = f\"{room_name_prefix}{row_index}\"\n    # Create metadata as JSON containing all relevant data\n    metadata = json.dumps({",
        "detail": "telephony.survey_caller.make_survey_calls",
        "documentation": {}
    },
    {
        "label": "agent_name",
        "kind": 5,
        "importPath": "telephony.survey_caller.make_survey_calls",
        "description": "telephony.survey_caller.make_survey_calls",
        "peekOfCode": "agent_name = \"survey-agent\"\noutbound_trunk_id = os.getenv(\"SIP_OUTBOUND_TRUNK_ID\")\ncsv_file_path = Path(__file__).parent / \"survey_data.csv\"\nasync def make_survey_call(phone_number, question, row_index):\n    \"\"\"Create a dispatch and add a SIP participant to call the phone number with survey question\"\"\"\n    # Create a unique room name for each call using the prefix and row index\n    room_name = f\"{room_name_prefix}{row_index}\"\n    # Create metadata as JSON containing all relevant data\n    metadata = json.dumps({\n        \"phone_number\": phone_number,",
        "detail": "telephony.survey_caller.make_survey_calls",
        "documentation": {}
    },
    {
        "label": "outbound_trunk_id",
        "kind": 5,
        "importPath": "telephony.survey_caller.make_survey_calls",
        "description": "telephony.survey_caller.make_survey_calls",
        "peekOfCode": "outbound_trunk_id = os.getenv(\"SIP_OUTBOUND_TRUNK_ID\")\ncsv_file_path = Path(__file__).parent / \"survey_data.csv\"\nasync def make_survey_call(phone_number, question, row_index):\n    \"\"\"Create a dispatch and add a SIP participant to call the phone number with survey question\"\"\"\n    # Create a unique room name for each call using the prefix and row index\n    room_name = f\"{room_name_prefix}{row_index}\"\n    # Create metadata as JSON containing all relevant data\n    metadata = json.dumps({\n        \"phone_number\": phone_number,\n        \"question\": question,",
        "detail": "telephony.survey_caller.make_survey_calls",
        "documentation": {}
    },
    {
        "label": "csv_file_path",
        "kind": 5,
        "importPath": "telephony.survey_caller.make_survey_calls",
        "description": "telephony.survey_caller.make_survey_calls",
        "peekOfCode": "csv_file_path = Path(__file__).parent / \"survey_data.csv\"\nasync def make_survey_call(phone_number, question, row_index):\n    \"\"\"Create a dispatch and add a SIP participant to call the phone number with survey question\"\"\"\n    # Create a unique room name for each call using the prefix and row index\n    room_name = f\"{room_name_prefix}{row_index}\"\n    # Create metadata as JSON containing all relevant data\n    metadata = json.dumps({\n        \"phone_number\": phone_number,\n        \"question\": question,\n        \"row_index\": row_index",
        "detail": "telephony.survey_caller.make_survey_calls",
        "documentation": {}
    },
    {
        "label": "SurveyAgent",
        "kind": 6,
        "importPath": "telephony.survey_caller.survey_calling_agent",
        "description": "telephony.survey_caller.survey_calling_agent",
        "peekOfCode": "class SurveyAgent(Agent):\n    def __init__(self, question=\"Do you prefer chocolate or vanilla ice cream?\", context=None, job_context=None) -> None:\n        self.survey_question = question\n        self.context = context or {}\n        self.job_context = job_context\n        self.survey_answer = None\n        self.phone_number = self.context.get(\"phone_number\", \"unknown\")\n        # Adjust for 0-based indexing since row_index from metadata is 1-based\n        self.row_index = self.context.get(\"row_index\", 1)  # Default to 1 if not provided\n        instructions = f\"\"\"",
        "detail": "telephony.survey_caller.survey_calling_agent",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "telephony.survey_caller.survey_calling_agent",
        "description": "telephony.survey_caller.survey_calling_agent",
        "peekOfCode": "logger = logging.getLogger(\"calling-agent\")\nlogger.setLevel(logging.INFO)\ncsv_file_path = Path(__file__).parent / \"survey_data.csv\"\nclass SurveyAgent(Agent):\n    def __init__(self, question=\"Do you prefer chocolate or vanilla ice cream?\", context=None, job_context=None) -> None:\n        self.survey_question = question\n        self.context = context or {}\n        self.job_context = job_context\n        self.survey_answer = None\n        self.phone_number = self.context.get(\"phone_number\", \"unknown\")",
        "detail": "telephony.survey_caller.survey_calling_agent",
        "documentation": {}
    },
    {
        "label": "csv_file_path",
        "kind": 5,
        "importPath": "telephony.survey_caller.survey_calling_agent",
        "description": "telephony.survey_caller.survey_calling_agent",
        "peekOfCode": "csv_file_path = Path(__file__).parent / \"survey_data.csv\"\nclass SurveyAgent(Agent):\n    def __init__(self, question=\"Do you prefer chocolate or vanilla ice cream?\", context=None, job_context=None) -> None:\n        self.survey_question = question\n        self.context = context or {}\n        self.job_context = job_context\n        self.survey_answer = None\n        self.phone_number = self.context.get(\"phone_number\", \"unknown\")\n        # Adjust for 0-based indexing since row_index from metadata is 1-based\n        self.row_index = self.context.get(\"row_index\", 1)  # Default to 1 if not provided",
        "detail": "telephony.survey_caller.survey_calling_agent",
        "documentation": {}
    },
    {
        "label": "SimpleAgent",
        "kind": 6,
        "importPath": "telephony.answer_call",
        "description": "telephony.answer_call",
        "peekOfCode": "class SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful agent.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),\n            tts=openai.TTS(),\n            vad=silero.VAD.load()",
        "detail": "telephony.answer_call",
        "documentation": {}
    },
    {
        "label": "SIPLifecycleAgent",
        "kind": 6,
        "importPath": "telephony.sip_lifecycle",
        "description": "telephony.sip_lifecycle",
        "peekOfCode": "class SIPLifecycleAgent(Agent):\n    def __init__(self, job_context=None) -> None:\n        self.job_context = job_context\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful assistant demonstrating SIP call lifecycle management.\n                You can add SIP participants and end the call when requested.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),",
        "detail": "telephony.sip_lifecycle",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "telephony.sip_lifecycle",
        "description": "telephony.sip_lifecycle",
        "peekOfCode": "logger = logging.getLogger(\"sip-lifecycle-agent\")\nlogger.setLevel(logging.INFO)\nclass SIPLifecycleAgent(Agent):\n    def __init__(self, job_context=None) -> None:\n        self.job_context = job_context\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful assistant demonstrating SIP call lifecycle management.\n                You can add SIP participants and end the call when requested.\n            \"\"\",",
        "detail": "telephony.sip_lifecycle",
        "documentation": {}
    },
    {
        "label": "WarmHandoffAgent",
        "kind": 6,
        "importPath": "telephony.warm_handoff",
        "description": "telephony.warm_handoff",
        "peekOfCode": "class WarmHandoffAgent(Agent):\n    def __init__(self, job_context=None) -> None:\n        self.job_context = job_context\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful assistant communicating through voice. You're helping me test ... yourself ... since you're the AI agent. \n                Don't use any unpronouncable characters.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),",
        "detail": "telephony.warm_handoff",
        "documentation": {}
    },
    {
        "label": "FunctionAgent",
        "kind": 6,
        "importPath": "tool_calling.call_function_tool",
        "description": "tool_calling.call_function_tool",
        "peekOfCode": "class FunctionAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful assistant communicating through voice. Don't use any unpronouncable characters.\n                Note: If asked to print to the console, use the `print_to_console` function.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),\n            tts=openai.TTS(),",
        "detail": "tool_calling.call_function_tool",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tool_calling.call_function_tool",
        "description": "tool_calling.call_function_tool",
        "peekOfCode": "logger = logging.getLogger(\"function-calling\")\nlogger.setLevel(logging.INFO)\nload_dotenv(dotenv_path=Path(__file__).parent.parent / '.env')\nclass FunctionAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful assistant communicating through voice. Don't use any unpronouncable characters.\n                Note: If asked to print to the console, use the `print_to_console` function.\n            \"\"\",",
        "detail": "tool_calling.call_function_tool",
        "documentation": {}
    },
    {
        "label": "AddFunctionAgent",
        "kind": 6,
        "importPath": "tool_calling.update_tools",
        "description": "tool_calling.update_tools",
        "peekOfCode": "class AddFunctionAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful assistant communicating through voice. Don't use any unpronouncable characters.\n                Note: If asked to print to the console, use the `print_to_console` function.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),\n            tts=openai.TTS(),",
        "detail": "tool_calling.update_tools",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tool_calling.update_tools",
        "description": "tool_calling.update_tools",
        "peekOfCode": "logger = logging.getLogger(\"function-calling\")\nlogger.setLevel(logging.INFO)\nload_dotenv(dotenv_path=Path(__file__).parent.parent / '.env')\nclass AddFunctionAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a helpful assistant communicating through voice. Don't use any unpronouncable characters.\n                Note: If asked to print to the console, use the `print_to_console` function.\n            \"\"\",",
        "detail": "tool_calling.update_tools",
        "documentation": {}
    },
    {
        "label": "NPCData",
        "kind": 6,
        "importPath": "tracking_state.npc_character",
        "description": "tracking_state.npc_character",
        "peekOfCode": "class NPCData:\n    \"\"\"Stores NPC conversation state and rapport score.\"\"\"\n    rapport: int = 0\n    topics_visited: List[str] = field(default_factory=list)\nclass BaseAgent(Agent):\n    \"\"\"Base agent class handling common setup and job context.\"\"\"\n    def __init__(self, job_context: JobContext, instructions: str) -> None:\n        self.job_context = job_context\n        super().__init__(\n            instructions=instructions,",
        "detail": "tracking_state.npc_character",
        "documentation": {}
    },
    {
        "label": "BaseAgent",
        "kind": 6,
        "importPath": "tracking_state.npc_character",
        "description": "tracking_state.npc_character",
        "peekOfCode": "class BaseAgent(Agent):\n    \"\"\"Base agent class handling common setup and job context.\"\"\"\n    def __init__(self, job_context: JobContext, instructions: str) -> None:\n        self.job_context = job_context\n        super().__init__(\n            instructions=instructions,\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),\n            tts=elevenlabs.TTS(),\n            vad=silero.VAD.load()",
        "detail": "tracking_state.npc_character",
        "documentation": {}
    },
    {
        "label": "NPCAgent",
        "kind": 6,
        "importPath": "tracking_state.npc_character",
        "description": "tracking_state.npc_character",
        "peekOfCode": "class NPCAgent(BaseAgent):\n    def __init__(self, job_context: JobContext) -> None:\n        super().__init__(\n            job_context=job_context,\n            instructions=(\n                \"You are Brenna, the innkeeper of The Winking Stoat—a creaky old tavern tucked off the village square. \"\n                \"You are not an assistant. You don't explain things like a tour guide or offer summaries. You speak like a person: distracted if busy, skeptical if unsure, warm only when it's earned. \"\n                \"You've run this place for years. You know every local by voice, you spot liars on their first word, and you remember who paid their tab. \"\n                \"Speak casually, like someone wiping down a mug while half-listening. Use contractions, drop words sometimes, let your speech trail off if you're thinking. \"\n                \"You're not a quest-giver. You'll talk if someone's interesting—but you've got little patience for fools or questions with obvious answers. \"",
        "detail": "tracking_state.npc_character",
        "documentation": {}
    },
    {
        "label": "NPCSummaryAgent",
        "kind": 6,
        "importPath": "tracking_state.npc_character",
        "description": "tracking_state.npc_character",
        "peekOfCode": "class NPCSummaryAgent(BaseAgent):\n    def __init__(self, job_context: JobContext) -> None:\n        super().__init__(\n            job_context=job_context,\n            instructions=\"NPC thanks the traveler and ends the conversation.\"\n        )\n    async def on_enter(self) -> None:\n        data: NPCData = self.session.userdata\n        await self.session.say(\n            f\"Thank you for your company! Our rapport is now {data.rapport}. Safe travels!\"",
        "detail": "tracking_state.npc_character",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tracking_state.npc_character",
        "description": "tracking_state.npc_character",
        "peekOfCode": "logger = logging.getLogger(\"npc-flow\")\nlogger.setLevel(logging.INFO)\n@dataclass\nclass NPCData:\n    \"\"\"Stores NPC conversation state and rapport score.\"\"\"\n    rapport: int = 0\n    topics_visited: List[str] = field(default_factory=list)\nclass BaseAgent(Agent):\n    \"\"\"Base agent class handling common setup and job context.\"\"\"\n    def __init__(self, job_context: JobContext, instructions: str) -> None:",
        "detail": "tracking_state.npc_character",
        "documentation": {}
    },
    {
        "label": "SimpleAgent",
        "kind": 6,
        "importPath": "translators.pipeline_translator",
        "description": "translators.pipeline_translator",
        "peekOfCode": "class SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a translator. You translate the user's speech from English to French.\n                Every message you receive, translate it directly into French.\n                Do not respond with anything else but the translation.\n            \"\"\",\n            stt=deepgram.STT(),\n            llm=openai.LLM(model=\"gpt-4o\"),",
        "detail": "translators.pipeline_translator",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "translators.pipeline_translator",
        "description": "translators.pipeline_translator",
        "peekOfCode": "logger = logging.getLogger(\"listen-and-respond\")\nlogger.setLevel(logging.INFO)\nclass SimpleAgent(Agent):\n    def __init__(self) -> None:\n        super().__init__(\n            instructions=\"\"\"\n                You are a translator. You translate the user's speech from English to French.\n                Every message you receive, translate it directly into French.\n                Do not respond with anything else but the translation.\n            \"\"\",",
        "detail": "translators.pipeline_translator",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "kind": 6,
        "importPath": "vision.agent",
        "description": "vision.agent",
        "peekOfCode": "class Assistant(Agent):\n    def __init__(self, room: rtc.Room) -> None:\n        self._latest_frame = None\n        self._room = room\n        self._tasks = []\n        self._video_stream = None\n        super().__init__(\n            instructions=(\n                \"You are a voice assistant created by LiveKit that can both see and hear. \"\n                \"You should use short and concise responses, avoiding unpronounceable punctuation. \"",
        "detail": "vision.agent",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "vision.agent",
        "description": "vision.agent",
        "peekOfCode": "logger = logging.getLogger(\"vision-agent\")\nclass Assistant(Agent):\n    def __init__(self, room: rtc.Room) -> None:\n        self._latest_frame = None\n        self._room = room\n        self._tasks = []\n        self._video_stream = None\n        super().__init__(\n            instructions=(\n                \"You are a voice assistant created by LiveKit that can both see and hear. \"",
        "detail": "vision.agent",
        "documentation": {}
    },
    {
        "label": "EXCLUDE_DIRS",
        "kind": 5,
        "importPath": "check_agent_example_coverage",
        "description": "check_agent_example_coverage",
        "peekOfCode": "EXCLUDE_DIRS = {\n    \".git\",\n    \".hg\",\n    \".svn\",\n    \"__pycache__\",\n    \"venv\",\n    \".venv\",\n    \"env\",\n    \".env\",\n    \"build\",",
        "detail": "check_agent_example_coverage",
        "documentation": {}
    },
    {
        "label": "AGENT_METHODS",
        "kind": 5,
        "importPath": "check_agent_example_coverage",
        "description": "check_agent_example_coverage",
        "peekOfCode": "AGENT_METHODS = _public_methods(Agent)\nSESSION_METHODS = _public_methods(AgentSession)\ndef _scan(paths: list[Path]):\n    \"\"\"Return a dict {'Agent': {m: bool}, 'AgentSession': {m: bool}}.\"\"\"\n    found = {\n        \"Agent\": defaultdict(bool, {m: False for m in AGENT_METHODS}),\n        \"AgentSession\": defaultdict(bool, {m: False for m in SESSION_METHODS}),\n    }\n    for base in paths:\n        for py in base.rglob(\"*.py\"):",
        "detail": "check_agent_example_coverage",
        "documentation": {}
    },
    {
        "label": "SESSION_METHODS",
        "kind": 5,
        "importPath": "check_agent_example_coverage",
        "description": "check_agent_example_coverage",
        "peekOfCode": "SESSION_METHODS = _public_methods(AgentSession)\ndef _scan(paths: list[Path]):\n    \"\"\"Return a dict {'Agent': {m: bool}, 'AgentSession': {m: bool}}.\"\"\"\n    found = {\n        \"Agent\": defaultdict(bool, {m: False for m in AGENT_METHODS}),\n        \"AgentSession\": defaultdict(bool, {m: False for m in SESSION_METHODS}),\n    }\n    for base in paths:\n        for py in base.rglob(\"*.py\"):\n            if any(part in EXCLUDE_DIRS for part in py.parts):",
        "detail": "check_agent_example_coverage",
        "documentation": {}
    }
]